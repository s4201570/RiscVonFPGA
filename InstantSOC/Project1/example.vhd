
----------------------------------------------------------------------------------------------------
--                                                example
----------------------------------------------------------------------------------------------------
-- Descr: VHDL generated by InstantSOC 1.1.0 by FPGA-cores.com
-- Date:  03-06-2020 22:34:23
-- Src:   c:\InstantSOC\Project1\example.cpp
----------------------------------------------------------------------------------------------------

----------------
-- LICENSE
----------------
-- Copyright (C) 2019 FPGA-Cores.com. 
-- This code is only free to use for non-commercial use and for evaluation purpose.
-- Commercial use needs a commercial license - contact FPGA-Cores.com.
-- The code is generated on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.

-- -------------
-- DISCLAIMER
-- -------------
-- THIS CODE GENERATED BY TOOLS FROM FPGA-Cores.com IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
-- THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL FPGA-Cores.com OR ANY 
-- OF THEIR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
-- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
-- WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS CODE, EVEN IF 
-- ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
--
-- Without limiting the foregoing, FPGA-Cores.com make no warranty that:
--    * the code will meet your requirements.
--    * the code will be uninterrupted, timely, secure or error-free.
--    * the results that may be obtained from the use of the code will be effective, accurate or reliable.
--    * the quality of the code will meet your expectations.
--    * any errors in the tools will be corrected.
--
-- The generated code and its documentation:
--    * could include technical or other mistakes, inaccuracies or typographical errors. 
--    * may be out of date and FPGA-Cores.com, its contributors, and FPGA Cores make no commitment to update such materials.
--
-- The use of the generated code is done at your own discretion and risk and with agreement 
-- that you will be solely responsible for any damage to your system or loss of data that results from such activities. 
-- No advice or information, whether oral or written, obtained by you from FPGA-Cores.com, its website, shall create any warranty for the code.

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity example is
    port(
        clk : in std_logic;
        uart_tx : out std_logic;
        LEDs : out std_logic_vector(15 downto 0);
        accel_SCLK : out std_logic;
        accel_MOSI : out std_logic;
        accel_MISO : in std_logic;
        accel_SSn : out std_logic;
        s7_seg : out std_logic_vector(7 downto 0);
        s7_sel : out std_logic_vector(7 downto 0)
    );
end entity;

architecture IMPL of example is
constant n0 : unsigned(31 downto 0) := "00000000000000000000000111000100";
constant n1 : integer := 100;
constant n2 : integer := 12;
type n3 is array(0 to 2**n2-1) of std_logic_vector(31 downto 0);
constant n4 : n3 := (
x"00052783",x"00200713",x"ff010113",x"00e7a623",x"00c7a703",x"0047a683",x"00010737",x"ffc70713",x"00b00613",x"00011723",x"00c10623",x"00b106a3",x"00e6f6b3",x"00069863",x"00000513",x"01010113",
x"00008067",x"00b00693",x"00d7a023",x"00f14683",x"00b7a023",x"0007a023",x"00d7a023",x"00c7a683",x"0087a683",x"00e6f733",x"fc0708e3",x"0007a703",x"0007a703",x"0007a703",x"0007a503",x"0ff77793",
x"00851513",x"00f56533",x"01051513",x"41055513",x"01010113",x"00008067",x"ff010113",x"00112623",x"02c020ef",x"100007b7",x"2b07a603",x"2b47a683",x"00159593",x"0015d593",x"771000ef",x"78d010ef",
x"00c12083",x"01010113",x"00008067",x"00900793",x"00a7ee63",x"100007b7",x"00078793",x"00251513",x"00a78533",x"00052503",x"00008067",x"00000513",x"00008067",x"41f65793",x"00c7c6b3",x"40f686b3",
x"00a00e13",x"03c6c7b3",x"00052703",x"10000837",x"00080813",x"00259593",x"00b70eb3",x"00458313",x"00670333",x"00858893",x"011708b3",x"03c6e533",x"03c7e7b3",x"00251513",x"00a80533",x"00052503",
x"fff54513",x"00aea023",x"06400513",x"02a6c533",x"00279793",x"00f807b3",x"0007a783",x"0807e793",x"fff7c793",x"00f32023",x"fff00793",x"00050863",x"3e700313",x"fff00793",x"02d35063",x"00c58593",
x"00f8a023",x"00b70733",x"02064863",x"fff00793",x"00f72023",x"00008067",x"00251513",x"00a80533",x"00052783",x"00c58593",x"00b70733",x"fff7c793",x"00f8a023",x"fc065ce3",x"fbf00793",x"00f72023",
x"00008067",x"f3010113",x"06400593",x"07410513",x"0c112623",x"0b312e23",x"0c812423",x"0c912223",x"0d212023",x"0b412c23",x"0b512a23",x"0b612823",x"0b712623",x"0b812423",x"0b912223",x"0ba12023",
x"09b12e23",x"5e1000ef",x"00800593",x"08810513",x"5b9000ef",x"00400593",x"07810513",x"08010623",x"5a9000ef",x"01000593",x"07c10513",x"59d000ef",x"00800593",x"08010513",x"591000ef",x"02000593",
x"08410513",x"585000ef",x"08812983",x"100007b7",x"04800693",x"02878793",x"00178793",x"00d9a023",x"0007c683",x"fe069ae3",x"07c12b83",x"00200613",x"00cba683",x"004ba683",x"01069693",x"0106d693",
x"00d67c63",x"00a00693",x"00dba023",x"02d00693",x"00dba023",x"00cba023",x"100006b7",x"2b46a603",x"2b06a703",x"100006b7",x"2ac6a783",x"08012483",x"00cba683",x"00f12a23",x"07812783",x"00100693",
x"08412a03",x"00d4a023",x"010106b7",x"00f12823",x"00d4a223",x"08000793",x"100006b7",x"00f12623",x"03868793",x"02f12423",x"800007b7",x"fff7c793",x"00f12223",x"00070793",x"00000c13",x"00e12c23",
x"00c12e23",x"10000337",x"00010e37",x"02e12023",x"02c12223",x"06f12023",x"06c12223",x"06f12423",x"06c12623",x"04f12023",x"04c12223",x"04f12423",x"04c12623",x"04f12823",x"04c12a23",x"04f12c23",
x"04c12e23",x"02f12823",x"02c12a23",x"02f12c23",x"000b8913",x"00030d13",x"000a0b93",x"ffce0c93",x"000c0a13",x"00a00d93",x"06400413",x"02c12e23",x"00098c13",x"020107b7",x"00f4a223",x"0c800793",
x"00f4a023",x"00200793",x"0004a683",x"00f92623",x"00c92683",x"00492683",x"0196f6b3",x"46069e63",x"00000b13",x"01612423",x"00200793",x"00f92623",x"00c92683",x"00492683",x"0196f6b3",x"3e069c63",
x"00000313",x"00030a93",x"00200793",x"00f92623",x"00c92683",x"00492683",x"00000993",x"0196f6b3",x"34069e63",x"00030513",x"159000ef",x"00050593",x"000b0513",x"1fc020ef",x"5e0000ef",x"01412583",
x"734020ef",x"785020ef",x"00812583",x"00050b13",x"00098513",x"579010ef",x"129000ef",x"00050593",x"000a8513",x"1cc020ef",x"5b0000ef",x"100007b7",x"2ac7a583",x"700020ef",x"751020ef",x"00050993",
x"03bb4533",x"03b56533",x"485010ef",x"00412783",x"01812603",x"01c12683",x"00f5f5b3",x"3cd000ef",x"3e9010ef",x"028b46b3",x"0ff57a93",x"03b6e533",x"45d010ef",x"00412783",x"02412683",x"02012603",
x"00f5f5b3",x"3a5000ef",x"3c1010ef",x"00d00693",x"00dc2023",x"0ff57513",x"3e0b4263",x"00ac2023",x"02e00693",x"015c2023",x"00dc2023",x"02000613",x"02812683",x"1a09dc63",x"00168693",x"00cc2023",
x"0006c603",x"fe061ae3",x"0289c533",x"02d00693",x"00dc2023",x"03b56533",x"3f5010ef",x"00412a83",x"05012603",x"05412683",x"0155f5b3",x"33d000ef",x"359010ef",x"03b9c6b3",x"0ff57513",x"00ac2023",
x"03b6e533",x"3c9010ef",x"05812603",x"05c12683",x"0155f5b3",x"315000ef",x"331010ef",x"0ff57513",x"02e00693",x"00ac2023",x"00dc2023",x"02812683",x"02000613",x"00168693",x"00cc2023",x"0006c603",
x"fe061ae3",x"41fb5693",x"0166c633",x"40d60633",x"03b646b3",x"03b665b3",x"03b6e6b3",x"00259593",x"00bd05b3",x"0005a583",x"fff5c593",x"00bba023",x"028645b3",x"00269693",x"00dd06b3",x"0006a683",
x"0806e693",x"fff6c693",x"00dba223",x"16058463",x"3e700513",x"fff00693",x"00c54a63",x"00259593",x"00bd05b3",x"0005a683",x"fff6c693",x"00dba423",x"140b4863",x"fff00693",x"00dba623",x"41f9d693",
x"0136c633",x"40d60633",x"03b646b3",x"03b665b3",x"03b6e6b3",x"00259593",x"00bd05b3",x"0005a583",x"fff5c593",x"00bba823",x"028645b3",x"00269693",x"00dd06b3",x"0006a683",x"0806e693",x"fff6c693",
x"00dbaa23",x"fff00693",x"02058063",x"3e700513",x"fff00693",x"00c54a63",x"00259593",x"00bd05b3",x"0005a683",x"fff6c693",x"00dbac23",x"013a0a33",x"0c09ce63",x"fff00693",x"00dbae23",x"0fa00693",
x"3746dc63",x"00c12783",x"000086b7",x"38d78063",x"00179793",x"00f12623",x"00078693",x"00000a13",x"01012783",x"00d7a023",x"d0dff06f",x"00168693",x"00cc2023",x"0006c603",x"fe061ae3",x"0289c533",
x"03b56533",x"249010ef",x"00412a83",x"03012603",x"03412683",x"0155f5b3",x"191000ef",x"1ad010ef",x"03b9c6b3",x"0ff57513",x"00ac2023",x"03b6e533",x"21d010ef",x"03812603",x"03c12683",x"0155f5b3",
x"169000ef",x"185010ef",x"0ff57513",x"02e00693",x"00ac2023",x"00dc2023",x"02812683",x"02000613",x"00168693",x"00cc2023",x"0006c603",x"fe061ae3",x"e55ff06f",x"fff00693",x"00dba423",x"ea0b5ce3",
x"fbf00693",x"00dba623",x"eb5ff06f",x"fbf00693",x"00dbae23",x"f0600693",x"2ada5063",x"00c12783",x"00100693",x"28d78e63",x"4017d793",x"00f12623",x"00078693",x"00000a13",x"f29ff06f",x"00b00793",
x"00f92023",x"01200693",x"00d92023",x"00092023",x"00092023",x"00c92683",x"00892683",x"0196f6b3",x"c80682e3",x"00092683",x"00092683",x"00092683",x"00092503",x"02612623",x"0ff6f693",x"00851513",
x"00d56533",x"01051513",x"41055513",x"471020ef",x"00050593",x"3a0020ef",x"02c12303",x"00050593",x"00050993",x"00030513",x"1e5010ef",x"00050313",x"c35ff06f",x"00b00793",x"00f92023",x"01000793",
x"00f92023",x"00092023",x"00092023",x"00c92683",x"00892683",x"0196f6b3",x"be0684e3",x"00092683",x"00092683",x"00092683",x"00092503",x"0ff6f693",x"00851513",x"00d56533",x"01051513",x"41055513",
x"3fd020ef",x"00050593",x"00050a93",x"328020ef",x"00050313",x"bb5ff06f",x"00b00793",x"00f92023",x"00e00793",x"00f92023",x"00092023",x"00092023",x"00c92683",x"00892683",x"0196f6b3",x"b60682e3",
x"00092683",x"00092683",x"00092683",x"00092503",x"0ff6f693",x"00851513",x"00d56533",x"01051513",x"41055513",x"399020ef",x"00050593",x"00050b13",x"2c4020ef",x"00a12423",x"b31ff06f",x"02d00693",
x"00dc2023",x"00ac2023",x"02e00693",x"015c2023",x"00dc2023",x"02000613",x"02812683",x"0809da63",x"00168693",x"00cc2023",x"0006c603",x"fe061ae3",x"0289c533",x"02d00693",x"00dc2023",x"03b56533",
x"00d010ef",x"00412a83",x"06012603",x"06412683",x"0155f5b3",x"754000ef",x"770010ef",x"03b9c6b3",x"0ff57513",x"00ac2023",x"03b6e533",x"7e0010ef",x"06812603",x"06c12683",x"0155f5b3",x"72c000ef",
x"748010ef",x"0ff57513",x"02e00693",x"00ac2023",x"00dc2023",x"02812683",x"02000613",x"00168693",x"00cc2023",x"0006c603",x"fe061ae3",x"c19ff06f",x"00168693",x"00cc2023",x"0006c603",x"fe061ae3",
x"0289c533",x"03b56533",x"784010ef",x"00412a83",x"04012603",x"04412683",x"0155f5b3",x"6cc000ef",x"6e8010ef",x"03b9c6b3",x"0ff57513",x"00ac2023",x"03b6e533",x"758010ef",x"04812603",x"04c12683",
x"0155f5b3",x"6a4000ef",x"6c0010ef",x"0ff57513",x"02e00693",x"00ac2023",x"00dc2023",x"02812683",x"02000613",x"00168693",x"00cc2023",x"0006c603",x"fe061ae3",x"b91ff06f",x"00c12683",x"ca5ff06f",
x"00100693",x"00000a13",x"c99ff06f",x"000086b7",x"00000a13",x"c8dff06f",x"fe010113",x"00812c23",x"00151413",x"00912a23",x"01312623",x"00112e23",x"01212823",x"01412423",x"00145413",x"508007b7",
x"00050493",x"00050993",x"04f44063",x"7f8007b7",x"1c87ca63",x"20a05663",x"0ffff797",x"62478793",x"0007a783",x"01c12083",x"01812403",x"01412483",x"01012903",x"00c12983",x"00812a03",x"00078513",
x"02010113",x"00008067",x"3ee007b7",x"1ef45a63",x"310007b7",x"1af44063",x"fff00913",x"00048593",x"00048513",x"0d0020ef",x"00050593",x"00050a13",x"0c4020ef",x"0ffff797",x"5e478793",x"0007a583",
x"00050413",x"0b0020ef",x"0ffff797",x"5d478793",x"0007a583",x"6f8010ef",x"00040593",x"098020ef",x"0ffff797",x"5c078793",x"0007a583",x"6e0010ef",x"00040593",x"080020ef",x"0ffff797",x"5ac78793",
x"0007a583",x"6c8010ef",x"00040593",x"068020ef",x"0ffff797",x"59878793",x"0007a583",x"6b0010ef",x"00040593",x"050020ef",x"0ffff797",x"58478793",x"0007a583",x"698010ef",x"000a0593",x"038020ef",
x"0ffff797",x"57078793",x"0007a583",x"00050a13",x"00040513",x"020020ef",x"0ffff797",x"55c78793",x"0007a583",x"394020ef",x"00040593",x"008020ef",x"0ffff797",x"54878793",x"0007a583",x"37c020ef",
x"00040593",x"7f1010ef",x"0ffff797",x"53478793",x"0007a583",x"364020ef",x"00040593",x"7d9010ef",x"0ffff797",x"52078793",x"0007a583",x"34c020ef",x"00040593",x"7c1010ef",x"00050593",x"000a0513",
x"60c010ef",x"00048593",x"7ad010ef",x"fff00793",x"00050593",x"08f90e63",x"00291913",x"0ffff797",x"4f878793",x"012787b3",x"0007a583",x"0ffff797",x"4d878793",x"01278933",x"300020ef",x"00048593",
x"2f8020ef",x"00050593",x"00092503",x"2ec020ef",x"00050793",x"e409d8e3",x"80000737",x"00a747b3",x"e45ff06f",x"00050593",x"5a4010ef",x"00050793",x"e35ff06f",x"0ffff797",x"45078793",x"0007a583",
x"58c010ef",x"0ffff797",x"44478793",x"0007a583",x"5a1010ef",x"00048793",x"e4a050e3",x"e09ff06f",x"0ffff797",x"42078793",x"0007a783",x"df9ff06f",x"00048513",x"284020ef",x"00050793",x"de9ff06f",
x"0f4000ef",x"3f9807b7",x"00050493",x"04f45a63",x"3f3007b7",x"0af45e63",x"00050593",x"530010ef",x"0ffff797",x"3e878793",x"0007a583",x"00000913",x"248020ef",x"0ffff797",x"3d878793",x"0007a583",
x"00050413",x"00048513",x"504010ef",x"00050593",x"00040513",x"15d010ef",x"00050493",x"dc1ff06f",x"401c07b7",x"04f45663",x"0ffff417",x"3a840413",x"00042583",x"00200913",x"200020ef",x"00042583",
x"00050a13",x"00048513",x"66d010ef",x"0ffff797",x"37c78793",x"0007a583",x"4b4010ef",x"00050593",x"000a0513",x"10d010ef",x"00050493",x"d71ff06f",x"0ffff797",x"36478793",x"0007a503",x"00048593",
x"00300913",x"0ed010ef",x"00050493",x"d51ff06f",x"0ffff417",x"33840413",x"00042583",x"00100913",x"198020ef",x"00050a13",x"00042583",x"00048513",x"fa9ff06f",x"00151513",x"00155513",x"00008067",
x"fc010113",x"02812c23",x"02912a23",x"03212823",x"02112e23",x"00050413",x"11c000ef",x"10000797",x"9a078793",x"0007a483",x"fff00793",x"00050913",x"02f48263",x"00040593",x"00040513",x"5c0020ef",
x"00051a63",x"00000593",x"00040513",x"4e1010ef",x"02054063",x"03c12083",x"03812403",x"00090513",x"03412483",x"03012903",x"04010113",x"00008067",x"00100793",x"00f12423",x"00040513",x"0ffff797",
x"2e878793",x"00f12623",x"02012423",x"744020ef",x"00a12c23",x"00b12e23",x"00a12823",x"00b12a23",x"06048463",x"00000613",x"00000693",x"00060513",x"00068593",x"2b9000ef",x"02a12023",x"02b12223",
x"00200793",x"04f49663",x"291020ef",x"02100793",x"00f52023",x"02812783",x"04079663",x"02012503",x"02412583",x"7ec020ef",x"03c12083",x"03812403",x"00050913",x"00090513",x"03412483",x"03012903",
x"04010113",x"00008067",x"02012023",x"02012223",x"00810513",x"16c000ef",x"fa0508e3",x"02812783",x"fa078ee3",x"235020ef",x"02812783",x"00f52023",x"fadff06f",x"ff010113",x"00151793",x"00812423",
x"00112623",x"0017d793",x"7f800737",x"00050413",x"00050593",x"0ce7f863",x"0a078c63",x"00050793",x"0e054863",x"00a77733",x"41755693",x"02071663",x"00851713",x"10074063",x"00000713",x"0080006f",
x"00060713",x"00179793",x"00879593",x"00170613",x"fe05d8e3",x"40e686b3",x"00800737",x"fff70613",x"00c7f7b3",x"f8168693",x"00e7e733",x"0016f613",x"00171793",x"08061a63",x"4016d813",x"00000513",
x"01900693",x"00000593",x"01000737",x"00e58633",x"fff68693",x"00c7c863",x"00e605b3",x"40c787b3",x"00e50533",x"00179793",x"00175713",x"fe0690e3",x"00078663",x"00150513",x"ffe57513",x"40155513",
x"3f0005b7",x"00b505b3",x"01781693",x"00b685b3",x"00c12083",x"00812403",x"00058513",x"01010113",x"00008067",x"3d1010ef",x"00040593",x"220010ef",x"00c12083",x"00812403",x"00050593",x"00058513",
x"01010113",x"00008067",x"00271793",x"f6dff06f",x"729010ef",x"00050593",x"658010ef",x"00c12083",x"00812403",x"00050593",x"00058513",x"01010113",x"00008067",x"fff00713",x"40e686b3",x"f1dff06f",
x"00000513",x"00008067",x"0ffff717",x"72872703",x"00072783",x"00f52023",x"00f585b3",x"00b72023",x"00008067",x"ff010113",x"00812423",x"00058413",x"00000593",x"00112623",x"fd1ff0ef",x"0ffff797",
x"6f47a783",x"20000737",x"00e7a023",x"0ffff797",x"6e07a783",x"0087a023",x"00c12083",x"00812403",x"01010113",x"00008067",x"00100837",x"fe010113",x"fff80813",x"00b87733",x"00912a23",x"00d87833",
x"0145d493",x"0146d313",x"00371e13",x"01312623",x"01d55713",x"00381813",x"01d65793",x"7ff4f493",x"7ff37313",x"00112e23",x"00812c23",x"01212823",x"01f5d993",x"01f6de93",x"01c76733",x"00351f13",
x"0107e833",x"00361f93",x"40648e33",x"1dd98463",x"17c05863",x"20030a63",x"008006b7",x"7ff00793",x"00d86833",x"40f48e63",x"03800793",x"3dc7ca63",x"01f00793",x"55c7c663",x"02000513",x"41c50533",
x"01cfd7b3",x"00a816b3",x"00af9933",x"00f6e6b3",x"01203933",x"01c857b3",x"0126e933",x"40f70733",x"412f0933",x"012f37b3",x"40f70633",x"00861793",x"2a07d263",x"00800737",x"fff70713",x"00e67433",
x"34040e63",x"00040513",x"6fc020ef",x"ff850713",x"02000793",x"40e787b3",x"00f957b3",x"00e41633",x"00c7e7b3",x"00e91933",x"30974c63",x"40970533",x"00150613",x"01f00713",x"44c74663",x"02000713",
x"40c70733",x"00c956b3",x"00e91933",x"00e79733",x"00d76733",x"01203933",x"01276933",x"00c7d633",x"00000493",x"00797793",x"02078063",x"00f97713",x"00400793",x"00f70a63",x"00490713",x"01273933",
x"01260633",x"00070913",x"00861793",x"2007d863",x"00148513",x"7ff00793",x"00098593",x"24f50c63",x"ff8007b7",x"fff78793",x"00f677b3",x"01d79893",x"00395913",x"00979793",x"0128e8b3",x"00c7d793",
x"7ff57513",x"00c79693",x"01451513",x"01c12083",x"01812403",x"00c6d693",x"01f59593",x"00a6e6b3",x"00b6e6b3",x"01412483",x"01012903",x"00c12983",x"00088513",x"00068593",x"02010113",x"00008067",
x"0c0e1463",x"00148313",x"7fe37313",x"28031063",x"01e767b3",x"01f868b3",x"1e049663",x"4c078063",x"50088863",x"41ff0933",x"410707b3",x"012f3633",x"40c78633",x"00861793",x"5a07d463",x"41ef8933",
x"40e807b3",x"012fb633",x"40c78633",x"000e8993",x"f15ff06f",x"0fc05a63",x"0c030863",x"008006b7",x"7ff00793",x"00d86833",x"44f48e63",x"03800793",x"15c7cc63",x"01f00793",x"3fc7da63",x"fe0e0913",
x"02000793",x"012856b3",x"00fe0a63",x"04000913",x"41c90933",x"01281933",x"012fefb3",x"01f03933",x"00d96933",x"12c0006f",x"01f867b3",x"22078663",x"fffe0793",x"44078463",x"7ff00693",x"20de0263",
x"00078e13",x"de5ff06f",x"409305b3",x"28049663",x"01e767b3",x"3c078263",x"fff58793",x"50078c63",x"7ff00693",x"28d58263",x"00078593",x"03800793",x"32b7ce63",x"01f00793",x"4ab7c263",x"02000793",
x"40b787b3",x"00f71933",x"00bf56b3",x"00ff17b3",x"00d96933",x"00f037b3",x"00b75733",x"00f96933",x"40e80833",x"3100006f",x"01f867b3",x"3e078463",x"fffe0793",x"28078263",x"7ff00693",x"38de0463",
x"00078e13",x"f29ff06f",x"1a0e1663",x"00148693",x"7fe6f793",x"3e079a63",x"01e767b3",x"34049e63",x"4a078863",x"01f867b3",x"3c078463",x"01ff0933",x"010707b3",x"01e93f33",x"01e78633",x"00861793",
x"0007da63",x"ff8007b7",x"fff78793",x"00f67633",x"00100493",x"00797793",x"dc079ae3",x"01d61793",x"00395893",x"00f8e8b3",x"00365793",x"7ff00713",x"06e48a63",x"00c79793",x"00c7d793",x"7ff4f513",
x"00098593",x"e01ff06f",x"01f86933",x"01203933",x"01e90933",x"01e937b3",x"00e78633",x"00861793",x"fa07dae3",x"00148493",x"7ff00793",x"1ef49663",x"00098593",x"7ff00513",x"00000793",x"00000893",
x"dc5ff06f",x"0a079c63",x"46088463",x"00361693",x"01d81793",x"0036d693",x"00d7e8b3",x"000e8993",x"00385793",x"00f8e7b3",x"fc0784e3",x"00000593",x"7ff00513",x"000807b7",x"00000893",x"d89ff06f",
x"ff800637",x"fff60613",x"00c7f633",x"00797793",x"40e484b3",x"d0079ce3",x"f45ff06f",x"00090513",x"3a4020ef",x"01850713",x"01f00793",x"cae7d2e3",x"ff850613",x"00c917b3",x"00000913",x"cadff06f",
x"01f86933",x"01203933",x"c59ff06f",x"41ff0933",x"41070633",x"012f3433",x"40860433",x"00841793",x"2c07cc63",x"008968b3",x"c4089ce3",x"00000793",x"00000993",x"00000493",x"efdff06f",x"f60898e3",
x"00351513",x"01d71793",x"00355513",x"00a7e8b3",x"00375793",x"f51ff06f",x"00351513",x"01d71793",x"00355513",x"00a7e8b3",x"000e0493",x"00375793",x"ebdff06f",x"40930533",x"14048a63",x"008006b7",
x"7ff00793",x"00d76733",x"38f30663",x"03800793",x"28a7c063",x"01f00793",x"32a7c663",x"02000793",x"40a787b3",x"00f71933",x"00af56b3",x"00ff17b3",x"00d96933",x"00f037b3",x"00a75733",x"00f96933",
x"00e80833",x"01f90933",x"01f937b3",x"01078633",x"00030493",x"e89ff06f",x"008006b7",x"7ff00793",x"00d76733",x"d8f314e3",x"00361793",x"0037d793",x"01d81893",x"0117e8b3",x"000e8993",x"00385793",
x"ea5ff06f",x"fe150713",x"02000693",x"00e7d733",x"00d60a63",x"04000693",x"40c68633",x"00c79633",x"00c96933",x"01203933",x"00e96933",x"00000613",x"00000493",x"de1ff06f",x"01ff0933",x"010707b3",
x"01e93633",x"00c78633",x"00861793",x"00100493",x"dc07d2e3",x"00200493",x"ff8007b7",x"fff78793",x"00f677b3",x"00195713",x"00197913",x"01276933",x"01f79893",x"0128e933",x"0017d613",x"b69ff06f",
x"fe0e0913",x"02000793",x"012856b3",x"00fe0a63",x"04000913",x"41c90933",x"01281933",x"012fefb3",x"01f03933",x"00d96933",x"ab9ff06f",x"01e76933",x"01203933",x"412f8933",x"012fb7b3",x"40f80633",
x"00030493",x"000e8993",x"aa5ff06f",x"01e767b3",x"1c078c63",x"fff50793",x"22078463",x"7ff00693",x"16d50463",x"00078513",x"ea5ff06f",x"02000793",x"41c787b3",x"00f816b3",x"00ff9933",x"01cfd633",
x"00c6e6b3",x"01203933",x"01c857b3",x"0126e933",x"00f70733",x"d3dff06f",x"00361793",x"0037d793",x"01d81893",x"0117e8b3",x"00058493",x"00385793",x"000e8993",x"cf9ff06f",x"10078863",x"01f86933",
x"d60916e3",x"00351513",x"01d71793",x"00355513",x"00f568b3",x"00375793",x"d4dff06f",x"10088663",x"00361693",x"01d81793",x"0036d693",x"00d7e8b3",x"000e8993",x"00385793",x"cbdff06f",x"41ff0933",
x"410707b3",x"012f3f33",x"41e78633",x"00100493",x"9ddff06f",x"00351513",x"01d71793",x"00355513",x"00f568b3",x"000e0493",x"00375793",x"c81ff06f",x"00351513",x"01d71793",x"00355513",x"00a7e8b3",
x"00375793",x"c71ff06f",x"7ff00793",x"caf682e3",x"01ff0933",x"01e93633",x"010707b3",x"00c787b3",x"01f79893",x"00195913",x"0128e933",x"0017d613",x"00068493",x"c21ff06f",x"41ef8933",x"40e80733",
x"012fb633",x"40c70433",x"000e8993",x"975ff06f",x"01e76933",x"01203933",x"dadff06f",x"fe058793",x"02000693",x"00f757b3",x"00d58a63",x"04000693",x"40b685b3",x"00b71733",x"00ef6f33",x"01e03933",
x"00f96933",x"e71ff06f",x"00361793",x"0037d793",x"01d81893",x"0117e8b3",x"00385793",x"c49ff06f",x"00c968b3",x"ba0898e3",x"00000793",x"00000993",x"bc5ff06f",x"41ef8933",x"40e807b3",x"012fb633",
x"40c78633",x"000e8993",x"00100493",x"8e1ff06f",x"00361693",x"01d81793",x"0036d693",x"00d7e8b3",x"00385793",x"b91ff06f",x"00361693",x"01d81793",x"0036d693",x"00d7e8b3",x"00050493",x"00385793",
x"b6dff06f",x"fe050793",x"02000693",x"00f757b3",x"00d50a63",x"04000693",x"40a68533",x"00a71733",x"00ef6f33",x"01e03933",x"00f96933",x"cd9ff06f",x"00000593",x"7ff00513",x"000807b7",x"949ff06f",
x"01ff0933",x"010707b3",x"01f93633",x"00c78633",x"d39ff06f",x"00361693",x"01d81793",x"0036d693",x"00d7e8b3",x"00385793",x"b7dff06f",x"fc010113",x"0145d793",x"02812c23",x"03212823",x"03512223",
x"00050913",x"00c59413",x"02112e23",x"02912a23",x"03312623",x"03412423",x"03612023",x"01712e23",x"7ff7f513",x"00c45413",x"01f5da93",x"16050a63",x"7ff00793",x"1cf50463",x"01d95a13",x"00341413",
x"008a6433",x"00800a37",x"01446a33",x"00391b13",x"c0150493",x"00000413",x"00000b93",x"0146d813",x"00c69913",x"7ff87813",x"00060893",x"00c95913",x"01f6d993",x"0e080063",x"7ff00793",x"04f80863",
x"01d65713",x"00391913",x"01276933",x"c0180813",x"008007b7",x"00f96733",x"00361893",x"410484b3",x"00000593",x"00f00793",x"013ac833",x"2487ee63",x"0fffe797",x"73c78793",x"00241413",x"00f40433",
x"00042603",x"00f60633",x"00060067",x"00c96733",x"80148493",x"18071063",x"00246413",x"00000893",x"00200593",x"fc1ff06f",x"7ff00613",x"00000793",x"00000713",x"00c79793",x"03c12083",x"03812403",
x"01461613",x"00c7d793",x"01f81813",x"00c7e7b3",x"0107e7b3",x"03412483",x"03012903",x"02c12983",x"02812a03",x"02412a83",x"02012b03",x"01c12b83",x"00070513",x"00078593",x"04010113",x"00008067",
x"00000813",x"7ff00613",x"000807b7",x"00000713",x"fa5ff06f",x"00c96733",x"0e070663",x"3e090e63",x"00090513",x"00c12423",x"5dd010ef",x"00812603",x"ff550713",x"01d00793",x"ff850693",x"40e787b3",
x"00d91933",x"00f657b3",x"0127e733",x"00d618b3",x"00950533",x"3f350493",x"00000593",x"f09ff06f",x"01246a33",x"080a0663",x"00d12623",x"00c12423",x"36040c63",x"00040513",x"58d010ef",x"00812603",
x"00c12683",x"00050493",x"ff550713",x"01d00a13",x"ff848b13",x"40ea0a33",x"01641433",x"01495a33",x"008a6a33",x"01691b33",x"c0d00513",x"409504b3",x"00000413",x"00000b93",x"e65ff06f",x"01246a33",
x"000a1c63",x"00800413",x"00000b13",x"7ff00493",x"00200b93",x"e49ff06f",x"00040a13",x"00090b13",x"00c00413",x"7ff00493",x"00300b93",x"e31ff06f",x"00400413",x"00000b13",x"00000493",x"00100b93",
x"e1dff06f",x"00146413",x"00000893",x"00100593",x"e55ff06f",x"00346413",x"00090713",x"00300593",x"e45ff06f",x"3c050463",x"00100793",x"40a787b3",x"03800693",x"42f6d463",x"00000613",x"00000793",
x"00000713",x"e71ff06f",x"00098693",x"00200793",x"4cf58a63",x"00300793",x"eaf584e3",x"00100793",x"00068813",x"fcf58ae3",x"3ff48513",x"faa05ce3",x"0078f793",x"32079e63",x"0038d693",x"00771793",
x"0007da63",x"ff0007b7",x"fff78793",x"00f77733",x"40048513",x"7fe00793",x"e0a7c8e3",x"01d71613",x"00971793",x"00c7d793",x"00d66733",x"7ff57613",x"e05ff06f",x"000a8693",x"000a0713",x"000b0893",
x"000b8593",x"f89ff06f",x"2b476a63",x"2aea0663",x"000b0693",x"fff48493",x"000a0413",x"00000b13",x"00871793",x"0188d313",x"00f36333",x"01035e93",x"03d457b3",x"01031f13",x"010f5f13",x"0106d593",
x"00889e13",x"03d47433",x"02ff0733",x"01041413",x"0085e5b3",x"00e5fe63",x"006585b3",x"fff78613",x"3265ea63",x"32e5f863",x"ffe78793",x"006585b3",x"40e585b3",x"03d5d733",x"01069693",x"0106d693",
x"03d5f5b3",x"02ef0633",x"01059593",x"00b6e5b3",x"00c5fe63",x"006585b3",x"fff70693",x"2e65e863",x"2ec5f663",x"ffe70713",x"006585b3",x"01079793",x"00010437",x"00e7e733",x"fff40793",x"00f77533",
x"01075893",x"010e5f93",x"00fe77b3",x"02f502b3",x"40c586b3",x"02f883b3",x"0102d593",x"02af8633",x"00760633",x"00c58633",x"03f88533",x"00767463",x"00850533",x"000108b7",x"fff88893",x"01065593",
x"01167633",x"01061613",x"0112f8b3",x"00a585b3",x"01160633",x"16b6ee63",x"16b68a63",x"40cb0633",x"40b686b3",x"00cb3b33",x"41668b33",x"3ff48513",x"1f630263",x"03db58b3",x"01065593",x"03db7b33",
x"031f06b3",x"010b1b13",x"0165eb33",x"00db7e63",x"006b0b33",x"fff88593",x"2c6b6463",x"2cdb7263",x"ffe88893",x"006b0b33",x"40db0b33",x"03db56b3",x"01061613",x"01065613",x"03db7b33",x"02df0f33",
x"010b1b13",x"01666633",x"01e67e63",x"00660633",x"fff68593",x"28666a63",x"29e67863",x"ffe68693",x"00660633",x"01089893",x"00d8e8b3",x"01089593",x"0108d293",x"0105d593",x"02f58eb3",x"41e60633",
x"02bf85b3",x"010ed693",x"02f287b3",x"00f585b3",x"00b686b3",x"025f8fb3",x"00f6f663",x"000107b7",x"00ff8fb3",x"000105b7",x"fff58593",x"0106d793",x"00b6f6b3",x"01069693",x"00befeb3",x"01f78fb3",
x"01d686b3",x"0df67863",x"00c30633",x"fff88793",x"24666463",x"21f66e63",x"27f60063",x"00078893",x"0018e893",x"d89ff06f",x"00090513",x"219010ef",x"01550713",x"01c00593",x"02050493",x"00812603",
x"00c12683",x"c8e5d4e3",x"ff850413",x"00891a33",x"00000b13",x"c95ff06f",x"00060513",x"00c12423",x"1e5010ef",x"01550713",x"01c00693",x"00050793",x"00812603",x"02050513",x"bee6dee3",x"ff878793",
x"00f61733",x"00000893",x"c09ff06f",x"e8cb78e3",x"01cb0b33",x"01cb3533",x"00650533",x"00a686b3",x"fff70513",x"02d37e63",x"16b6e063",x"14d58c63",x"00050713",x"e69ff06f",x"d51b6ce3",x"001b5593",
x"01fa1693",x"001a5413",x"00b6e6b3",x"01fb1b13",x"d51ff06f",x"f5f616e3",x"cc068ae3",x"f2dff06f",x"fcd318e3",x"fdcb72e3",x"00050713",x"e31ff06f",x"00f8f793",x"00400693",x"ccd780e3",x"ffc8b793",
x"00488693",x"0017c793",x"0036d693",x"00f70733",x"cadff06f",x"00000693",x"00100793",x"fea048e3",x"fff00893",x"c40512e3",x"c0100493",x"00100793",x"41e48513",x"00a716b3",x"00f8d633",x"00a89533",
x"00c6e6b3",x"00a03533",x"00a6e6b3",x"0076f613",x"00f75733",x"02060063",x"00f6f793",x"00400613",x"00c78a63",x"00468793",x"00d7b6b3",x"00d70733",x"00078693",x"00871793",x"0607d863",x"00100613",
x"00000793",x"00000713",x"a6dff06f",x"00068713",x"d1dff06f",x"00060793",x"cd9ff06f",x"01f00693",x"f8f6d8e3",x"fe100613",x"40a60633",x"02000693",x"00c75633",x"00d78863",x"43e48793",x"00f717b3",
x"00f8e8b3",x"011036b3",x"00c6e6b3",x"0076f613",x"00000793",x"02060063",x"00f6f793",x"00400613",x"00000713",x"f8c790e3",x"00971793",x"01d71613",x"00c7d793",x"0036d713",x"00c76733",x"00000613",
x"9f5ff06f",x"eacb76e3",x"01cb0b33",x"01cb3533",x"00650533",x"ffe70713",x"00a686b3",x"d01ff06f",x"00058893",x"d45ff06f",x"00058693",x"d79ff06f",x"001e1793",x"01c7be33",x"006e0333",x"00660633",
x"ffe88893",x"00078e13",x"ddf61ce3",x"b6de00e3",x"0018e893",x"b59ff06f",x"00078893",x"fff608e3",x"dc1ff06f",x"00068813",x"7ff00613",x"00000793",x"00000713",x"981ff06f",x"fade6ce3",x"00078893",
x"fcde18e3",x"b29ff06f",x"0145d793",x"001006b7",x"fff68713",x"7ff7f793",x"3fe00613",x"00b77733",x"01f5d593",x"00f65e63",x"41d00613",x"00f65e63",x"80000537",x"fff54513",x"00a58533",x"00008067",
x"00000513",x"00008067",x"43300613",x"40f60633",x"01f00813",x"00d76733",x"02c85063",x"41300693",x"40f687b3",x"00f757b3",x"40f00533",x"fc059ce3",x"00078513",x"00008067",x"bed78793",x"00f717b3",
x"00c55533",x"00a7e7b3",x"fe1ff06f",x"ff010113",x"00112623",x"00812423",x"00912223",x"04050a63",x"41f55793",x"00a7c4b3",x"40f484b3",x"00050413",x"00048513",x"710010ef",x"41e00693",x"40a686b3",
x"00a00793",x"01f45413",x"7ff6f693",x"06a7c463",x"00b00713",x"40a70733",x"00e4d7b3",x"01550513",x"00c79793",x"00a494b3",x"00c7d793",x"0140006f",x"00000413",x"00000693",x"00000793",x"00000493",
x"00c79793",x"01469693",x"00c7d793",x"01f41413",x"00d7e7b3",x"0087e7b3",x"00c12083",x"00812403",x"00048513",x"00078593",x"00412483",x"01010113",x"00008067",x"ff550513",x"00a497b3",x"00c79793",
x"00c7d793",x"00000493",x"fb9ff06f",x"ff010113",x"00800737",x"fff70713",x"0175d813",x"00912223",x"01755493",x"00a77333",x"0ff4f493",x"00b776b3",x"01212023",x"0ff87813",x"01f55913",x"00112623",
x"00812423",x"01f5d593",x"00030793",x"00048513",x"00090613",x"00331e13",x"00369e93",x"410488b3",x"12b90663",x"0f105a63",x"18080863",x"0ff00793",x"1af48063",x"040007b7",x"00feeeb3",x"01b00793",
x"3117ce63",x"02000793",x"411787b3",x"00fe97b3",x"011ed8b3",x"00f037b3",x"00f8e7b3",x"40fe07b3",x"00579713",x"20075063",x"04000437",x"fff40413",x"0087f433",x"00040513",x"5cc010ef",x"ffb50513",
x"00a417b3",x"20954c63",x"40950533",x"00150413",x"02000713",x"40870733",x"00e79733",x"00e03733",x"0087d7b3",x"00e7e7b3",x"00000493",x"0077f713",x"00070a63",x"00f7f713",x"00400693",x"00d70463",
x"00478793",x"00579713",x"1a075263",x"00148493",x"0ff00713",x"00090613",x"1ae48c63",x"00679793",x"0097d793",x"0ff4f513",x"00c12083",x"00812403",x"00979793",x"01751493",x"0097d513",x"00956533",
x"01f61613",x"00412483",x"00012903",x"00c56533",x"01010113",x"00008067",x"0c089663",x"00148713",x"0fe77713",x"18071a63",x"2a049663",x"260e0c63",x"fa0e8ce3",x"41de07b3",x"00579713",x"2a075c63",
x"41ce87b3",x"00058913",x"f65ff06f",x"0d105e63",x"0a080e63",x"0ff00793",x"06f48c63",x"040007b7",x"00feeeb3",x"01b00793",x"2717ce63",x"02000793",x"411787b3",x"00fe97b3",x"011ed8b3",x"00f037b3",
x"00f8e7b3",x"01c787b3",x"00579713",x"0c075c63",x"00148493",x"0ff00713",x"0ee48c63",x"7e0006b7",x"0017d713",x"fff68693",x"0017f793",x"00d77733",x"00f767b3",x"ef9ff06f",x"0a0e8c63",x"fff88893",
x"41de07b3",x"e8088ee3",x"0ff00793",x"e6f498e3",x"0a030e63",x"00000613",x"0ff00513",x"004007b7",x"f09ff06f",x"40980733",x"12049a63",x"180e0e63",x"fff70713",x"20070863",x"0ff00793",x"12f81863",
x"00058913",x"00068313",x"fc9ff06f",x"060e8263",x"fff88893",x"01de07b3",x"f60888e3",x"0ff00793",x"f4f492e3",x"fadff06f",x"0a089863",x"00148493",x"0fe4f713",x"18071063",x"16051063",x"1c0e0c63",
x"ea0e84e3",x"01de07b3",x"00579713",x"00000493",x"00075a63",x"fc000737",x"fff70713",x"00e7f7b3",x"00100493",x"0077f713",x"e40716e3",x"0037d313",x"0ff00793",x"f4f48ee3",x"00931793",x"0097d793",
x"0ff4f513",x"00090613",x"e61ff06f",x"00090613",x"0ff00513",x"00000793",x"e51ff06f",x"fc000737",x"fff70713",x"00e7f7b3",x"0077f713",x"40a484b3",x"e00712e3",x"fb9ff06f",x"41de0433",x"00541793",
x"1007c463",x"da0418e3",x"00000613",x"00000513",x"00000793",x"e15ff06f",x"40980733",x"08048463",x"0ff00793",x"f2f800e3",x"040007b7",x"00fe6e33",x"01b00793",x"12e7ca63",x"02000793",x"40e787b3",
x"00fe17b3",x"00ee5733",x"00f037b3",x"00f767b3",x"01d787b3",x"00080493",x"e71ff06f",x"0ff00793",x"eef800e3",x"040007b7",x"00fe6e33",x"01b00793",x"0ae7ce63",x"02000693",x"40e686b3",x"00de16b3",
x"00ee57b3",x"00d03733",x"00e7e7b3",x"40fe87b3",x"00080493",x"00058913",x"d09ff06f",x"00100793",x"cfdff06f",x"0a0e0c63",x"fff70713",x"01de07b3",x"00080493",x"e0070ae3",x"0ff00793",x"f6f81ae3",
x"00068313",x"e4dff06f",x"00068313",x"00080493",x"00058913",x"eddff06f",x"e60e06e3",x"e20e8ae3",x"e35ff06f",x"040e8a63",x"00058613",x"00068793",x"d39ff06f",x"0ff00793",x"ecf48ce3",x"01de07b3",
x"0017d793",x"ea1ff06f",x"41ce8433",x"00058913",x"ca5ff06f",x"fc0e14e3",x"de0e8ee3",x"00058913",x"e25ff06f",x"00100793",x"d9dff06f",x"00100793",x"f5dff06f",x"e60798e3",x"00000613",x"00000793",
x"ce9ff06f",x"41ce87b3",x"00080493",x"00058913",x"c51ff06f",x"00068793",x"cd1ff06f",x"00068313",x"00080493",x"e4dff06f",x"00100793",x"ee5ff06f",x"fc010113",x"01755793",x"03212823",x"03512223",
x"01712e23",x"00951a93",x"01f55913",x"02112e23",x"02812c23",x"02912a23",x"03312623",x"03412423",x"03612023",x"0ff7f793",x"009ada93",x"00090b93",x"18078863",x"0ff00713",x"18e78e63",x"003a9a93",
x"04000737",x"00eaeab3",x"f8178a13",x"00000413",x"00000b13",x"0175d793",x"00959493",x"0ff7f793",x"0094d493",x"01f5d993",x"14078663",x"0ff00713",x"04e78063",x"00349493",x"f8178793",x"04000737",
x"00e4e4b3",x"40fa0a33",x"00000693",x"0086e433",x"0fffe717",x"a5c70713",x"00241413",x"00e40433",x"00042783",x"01394933",x"00e787b3",x"00078067",x"f01a0a13",x"12049a63",x"00200693",x"0086e433",
x"0fffe717",x"a6c70713",x"00241413",x"00e40433",x"00042783",x"01394933",x"00e787b3",x"00078067",x"00000913",x"0ff00713",x"004007b7",x"00979513",x"03c12083",x"03812403",x"01771793",x"00955513",
x"01f91913",x"00f56533",x"01256533",x"03412483",x"03012903",x"02c12983",x"02812a03",x"02412a83",x"02012b03",x"01c12b83",x"04010113",x"00008067",x"0ff00713",x"00000793",x"fb5ff06f",x"00048a93",
x"00098b93",x"00068b13",x"00200793",x"24fb0a63",x"00300793",x"f8fb06e3",x"00100793",x"0efb0863",x"07fa0713",x"001bf913",x"18e05a63",x"007af793",x"00078a63",x"00faf793",x"00400693",x"00d78463",
x"004a8a93",x"004a9793",x"0007da63",x"f80007b7",x"fff78793",x"00fafab3",x"080a0713",x"0fe00793",x"f8e7c8e3",x"006a9793",x"0097d793",x"0ff77713",x"f3dff06f",x"06049c63",x"00100693",x"f01ff06f",
x"040a9063",x"00400413",x"00000a13",x"00100b13",x"e85ff06f",x"000a9e63",x"00800413",x"0ff00a13",x"00200b13",x"e71ff06f",x"00300693",x"ea1ff06f",x"00c00413",x"0ff00a13",x"00300b13",x"e59ff06f",
x"000a8513",x"00b12623",x"7fd000ef",x"ffb50793",x"00fa9ab3",x"f8a00793",x"40a78a33",x"00000413",x"00000b13",x"00c12583",x"e2dff06f",x"00048513",x"7d5000ef",x"ffb50713",x"00aa07b3",x"00e494b3",
x"07678a13",x"00000693",x"e45ff06f",x"001bf913",x"00000713",x"00000793",x"e95ff06f",x"00010637",x"00549513",x"fff60613",x"01055793",x"00c57633",x"0e9af663",x"02fad5b3",x"fffa0a13",x"000a8693",
x"00000713",x"02c58833",x"02f6f6b3",x"01069693",x"00e6e733",x"01077e63",x"00a70733",x"fff58693",x"0ea76663",x"0f077463",x"ffe58593",x"00a70733",x"41070733",x"02f756b3",x"02f77733",x"02c68ab3",
x"01071793",x"0157fe63",x"00a787b3",x"fff68713",x"0aa7ea63",x"0b57f863",x"ffe68693",x"00a787b3",x"01059593",x"41578ab3",x"00d5e5b3",x"01503ab3",x"0155eab3",x"00090b93",x"e69ff06f",x"00100693",
x"40e686b3",x"00070a63",x"01b00613",x"00000713",x"00000793",x"dcd64ce3",x"09ea0a13",x"014a9a33",x"00dad7b3",x"01403ab3",x"0157e7b3",x"0077f713",x"00070a63",x"00f7f713",x"00400693",x"00d70463",
x"00478793",x"00579713",x"04074663",x"00679793",x"0097d793",x"00000713",x"d95ff06f",x"001ad693",x"02f6d5b3",x"01fa9713",x"01075713",x"02c58833",x"f19ff06f",x"00098b93",x"00068b13",x"00000a93",
x"dc9ff06f",x"00070693",x"f59ff06f",x"00068593",x"f21ff06f",x"00100713",x"00000793",x"d51ff06f",x"001bf913",x"0ff00713",x"00000793",x"d41ff06f",x"01755693",x"008007b7",x"fff78793",x"0175d613",
x"0ff6f693",x"0ff00813",x"00a7f8b3",x"01f55713",x"00b7f7b3",x"0ff67613",x"01f5d593",x"03068a63",x"03060263",x"02069a63",x"00061463",x"06078263",x"04088a63",x"06b70863",x"00100513",x"04071063",
x"00008067",x"fe0780e3",x"ffe00513",x"00008067",x"fe089ce3",x"04d60463",x"00061463",x"fc078ee3",x"fcb71ce3",x"fcd64ae3",x"00c6c863",x"fd17e6e3",x"00000513",x"fcf8f6e3",x"00071863",x"fff00513",
x"00008067",x"fe058ce3",x"00100513",x"00008067",x"00000513",x"fa0892e3",x"00008067",x"fc0782e3",x"fa9ff06f",x"00000693",x"fc1ff06f",x"01755693",x"008007b7",x"fff78793",x"0175d613",x"0ff6f693",
x"0ff00813",x"00a7f8b3",x"01f55713",x"00b7f7b3",x"0ff67613",x"01f5d593",x"05068463",x"01060e63",x"04069663",x"02061263",x"02079063",x"00000513",x"02089063",x"00008067",x"00200513",x"fe079ce3",
x"fe0682e3",x"0280006f",x"04088663",x"06b70063",x"00100513",x"fe0700e3",x"fff00513",x"00008067",x"00200513",x"04089263",x"02d60c63",x"00061463",x"fe0780e3",x"fcb71ee3",x"fcd64ce3",x"00c6c863",
x"fd17e8e3",x"00000513",x"faf8f6e3",x"00071663",x"fc9ff06f",x"fc0582e3",x"00100513",x"00008067",x"fc078ae3",x"00008067",x"00008067",x"00000693",x"fcdff06f",x"fd010113",x"02812423",x"01755413",
x"01312e23",x"01412c23",x"00951993",x"02112623",x"02912223",x"03212023",x"01512a23",x"01612823",x"0ff47413",x"0099d993",x"01f55a13",x"12040063",x"0ff00793",x"14f40863",x"00399793",x"04000737",
x"00e7e9b3",x"f8140413",x"00000493",x"00000b13",x"0175d713",x"00959a93",x"0ff77713",x"009ada93",x"01f5d913",x"10070863",x"0ff00793",x"04f70663",x"003a9a93",x"f8170713",x"040007b7",x"00faeab3",
x"00e40433",x"00000613",x"012a4533",x"00f00793",x"00050693",x"00140593",x"1897e263",x"0fffd717",x"59070713",x"00249493",x"00e484b3",x"0004a783",x"00e787b3",x"00078067",x"0ff40413",x"120a9c63",
x"0024e493",x"00200613",x"fc1ff06f",x"00000513",x"0ff00713",x"004007b7",x"02c12083",x"02812403",x"00979793",x"01771713",x"0097d793",x"01f51513",x"00e7e7b3",x"02412483",x"02012903",x"01c12983",
x"01812a03",x"01412a83",x"01012b03",x"00a7e533",x"03010113",x"00008067",x"00090693",x"000a8993",x"00060b13",x"00200793",x"0efb0263",x"00300793",x"f8fb0ee3",x"00100793",x"00068513",x"22fb1463",
x"00000713",x"00000793",x"f91ff06f",x"06099e63",x"0175d713",x"00959a93",x"0ff77713",x"00400493",x"00000413",x"00100b13",x"009ada93",x"01f5d913",x"ee071ce3",x"020a9263",x"0014e493",x"00100613",
x"f09ff06f",x"02099a63",x"00800493",x"0ff00413",x"00200b13",x"ebdff06f",x"000a8513",x"329000ef",x"ffb50793",x"40a40433",x"00fa9ab3",x"f8a40413",x"00000613",x"ed5ff06f",x"00c00493",x"0ff00413",
x"00300b13",x"e8dff06f",x"00098513",x"00b12623",x"2f5000ef",x"ffb50793",x"f8a00413",x"00f999b3",x"40a40433",x"00000493",x"00000b13",x"00c12583",x"e61ff06f",x"0034e493",x"00300613",x"e8dff06f",
x"00200793",x"000a0693",x"f2fb12e3",x"00068513",x"0ff00713",x"00000793",x"ec1ff06f",x"00010337",x"fff30693",x"0109d613",x"010ad893",x"00d9f7b3",x"00dafab3",x"03578833",x"02f889b3",x"01085713",
x"03560ab3",x"015989b3",x"01370733",x"03160633",x"01577463",x"00660633",x"000107b7",x"fff78793",x"00f776b3",x"00f87833",x"01069693",x"010686b3",x"00669993",x"01075793",x"013039b3",x"01a6d693",
x"00c787b3",x"00679793",x"00d9e6b3",x"00d7e9b3",x"00499793",x"0007da63",x"0019d713",x"0019f793",x"00f769b3",x"00058413",x"07f40713",x"04e05663",x"0079f793",x"00078a63",x"00f9f793",x"00400693",
x"00d78463",x"00498993",x"00499793",x"0007da63",x"f80007b7",x"fff78793",x"00f9f9b3",x"08040713",x"0fe00793",x"06e7ca63",x"00699793",x"0097d793",x"0ff77713",x"de5ff06f",x"00100793",x"40e786b3",
x"00070a63",x"01b00613",x"00000713",x"00000793",x"dcd644e3",x"09e40713",x"00e99733",x"00e03733",x"00d9d7b3",x"00e7e7b3",x"0077f713",x"00070a63",x"00f7f713",x"00400693",x"00d70463",x"00478793",
x"00579713",x"02074463",x"00679793",x"0097d793",x"00000713",x"d85ff06f",x"0ff00713",x"00000793",x"d79ff06f",x"00058413",x"f41ff06f",x"00100713",x"00000793",x"d65ff06f",x"00800737",x"ff010113",
x"fff70713",x"01755693",x"0175d813",x"00a777b3",x"0ff6f693",x"01f55e93",x"00b77633",x"00912223",x"01212023",x"0ff87813",x"00112623",x"00812423",x"0ff00313",x"00078e13",x"00068913",x"000e8493",
x"00379f13",x"01f5d593",x"00361513",x"410688b3",x"14680063",x"0015c593",x"14be8c63",x"0f105e63",x"12081e63",x"24050a63",x"fff88893",x"40af07b3",x"02088863",x"0ff00793",x"1cf68463",x"01b00793",
x"3317c263",x"02000713",x"41170733",x"00e51733",x"011557b3",x"00e03733",x"00e7e7b3",x"40ff07b3",x"00579713",x"20075463",x"04000437",x"fff40413",x"0087f433",x"00040513",x"08d000ef",x"ffb50513",
x"00a417b3",x"23254063",x"41250533",x"00150413",x"02000713",x"40870733",x"00e79733",x"00e03733",x"0087d7b3",x"00e7e7b3",x"00000913",x"0077f713",x"00070a63",x"00f7f713",x"00400693",x"00d70463",
x"00478793",x"00579713",x"1a075663",x"00190693",x"0ff00713",x"0014fe93",x"1ce68063",x"00679793",x"0097d793",x"0ff6f693",x"00979793",x"00c12083",x"00812403",x"0097d513",x"01769693",x"01fe9793",
x"00d56533",x"00412483",x"00012903",x"00f56533",x"01010113",x"00008067",x"0c089263",x"00168713",x"0fe77713",x"18071e63",x"2a069a63",x"280f0063",x"fa050ce3",x"40af07b3",x"00579713",x"2c075063",
x"41e507b3",x"00000913",x"00058493",x"f61ff06f",x"ec0502e3",x"0cbe8e63",x"fd1050e3",x"0ff00793",x"0af68063",x"040007b7",x"00f56533",x"ed1ff06f",x"0d105063",x"0a080063",x"0ff00793",x"08f68263",
x"040007b7",x"00f56533",x"01b00793",x"2717c063",x"02000713",x"41170733",x"00e51733",x"011557b3",x"00e03733",x"00e7e7b3",x"01e787b3",x"00579713",x"0a075e63",x"00190913",x"0ff00713",x"0ce90e63",
x"7e0006b7",x"0017d713",x"fff68693",x"0017f793",x"00d77733",x"00f767b3",x"ed5ff06f",x"40d80733",x"14069263",x"1a0f0663",x"fff70713",x"22070263",x"0ff00793",x"14f81063",x"00058493",x"00060e13",
x"080e0a63",x"00000e93",x"0ff00693",x"004007b7",x"ed9ff06f",x"06050263",x"fff88893",x"00af07b3",x"f80886e3",x"0ff00793",x"f6f690e3",x"fd5ff06f",x"0a089863",x"00168913",x"0fe97713",x"18071063",
x"16069063",x"1c0f0e63",x"ea0500e3",x"00af07b3",x"00579713",x"00000913",x"00075a63",x"fc000737",x"fff70713",x"00e7f7b3",x"00100913",x"0077f713",x"e40712e3",x"0037de13",x"0ff00793",x"f8f902e3",
x"009e1793",x"0097d793",x"0ff97693",x"0014fe93",x"e59ff06f",x"0014fe93",x"0ff00693",x"00000793",x"e49ff06f",x"fc000737",x"fff70713",x"00e7f7b3",x"0077f713",x"40a90933",x"de071ee3",x"fb9ff06f",
x"40af0433",x"00541793",x"1007c463",x"da0414e3",x"00000e93",x"00000693",x"00000793",x"e0dff06f",x"40d80733",x"08068463",x"0ff00793",x"f0f808e3",x"040007b7",x"00ff6f33",x"01b00793",x"12e7cc63",
x"02000793",x"40e787b3",x"00ff17b3",x"00ef5733",x"00f037b3",x"00f76733",x"00a707b3",x"00080913",x"e8dff06f",x"0ff00793",x"ecf808e3",x"040007b7",x"00ff6f33",x"01b00793",x"0ae7ce63",x"02000793",
x"40e787b3",x"00ff17b3",x"00ef5733",x"00f037b3",x"00f767b3",x"40f507b3",x"00080913",x"00058493",x"d01ff06f",x"00100793",x"cf5ff06f",x"0a0f0e63",x"fff70713",x"00af07b3",x"00080913",x"e20708e3",
x"0ff00793",x"f6f81ae3",x"00060e13",x"e75ff06f",x"00060e13",x"00080913",x"00058493",x"eddff06f",x"e40f0ee3",x"e4050ee3",x"e5dff06f",x"04050c63",x"00058e93",x"00060793",x"d31ff06f",x"0ff00793",
x"ecf90ce3",x"00af07b3",x"0017d793",x"ea1ff06f",x"41e50433",x"00058493",x"c9dff06f",x"fc0f14e3",x"e20502e3",x"00058493",x"e15ff06f",x"00100793",x"db9ff06f",x"00100793",x"f5dff06f",x"00000913",
x"e60796e3",x"00000e93",x"00000793",x"cddff06f",x"41e507b3",x"00080913",x"00058493",x"c45ff06f",x"00060793",x"cc5ff06f",x"00060e13",x"00080913",x"e49ff06f",x"00100713",x"ee1ff06f",x"01755693",
x"008007b7",x"fff78793",x"0175d613",x"0ff6f693",x"0ff00813",x"00a7f733",x"0ff67613",x"00b7f7b3",x"01068e63",x"0ff00713",x"00000513",x"00e60463",x"00008067",x"00f03533",x"00008067",x"00100513",
x"fe0702e3",x"00008067",x"00800637",x"01755713",x"fff60793",x"0ff77713",x"07e00593",x"00a7f6b3",x"01f55793",x"00e5fe63",x"09d00593",x"00e5fe63",x"80000537",x"fff54513",x"00a78533",x"00008067",
x"00000513",x"00008067",x"09500593",x"00c6e6b3",x"02e5c063",x"09600613",x"40e60733",x"00e6d733",x"40e00533",x"fe0790e3",x"00070513",x"00008067",x"f6a70713",x"00e69733",x"fe9ff06f",x"ff010113",
x"00112623",x"00812423",x"00912223",x"04050863",x"41f55793",x"00a7c433",x"40f40433",x"00050493",x"00040513",x"3e0000ef",x"09e00793",x"40a78733",x"09600793",x"01f4d493",x"04e7ce63",x"00800693",
x"0ff77793",x"00a6d663",x"ff850513",x"00a41433",x"00941413",x"00945413",x"0100006f",x"00000493",x"00000793",x"00000413",x"00941413",x"00945513",x"00c12083",x"00812403",x"01779793",x"01f49493",
x"00f56533",x"00956533",x"00412483",x"01010113",x"00008067",x"09900793",x"02e7d063",x"01b50793",x"00500693",x"00f417b3",x"40a686b3",x"00d45433",x"00f037b3",x"00f46433",x"00500793",x"00a7d663",
x"ffb50793",x"00f41433",x"fc0006b7",x"fff68693",x"00747793",x"00d47633",x"02078463",x"00f47793",x"00400593",x"00b78e63",x"00460613",x"00561793",x"0007d863",x"09f00793",x"00d67633",x"40a78733",
x"00661413",x"00945413",x"0ff77793",x"f5dff06f",x"01755713",x"0ff77713",x"ff010113",x"00170793",x"00812423",x"00912223",x"00951413",x"00112623",x"0fe7f793",x"00945413",x"01f55493",x"04078263",
x"00345793",x"38070713",x"01d41413",x"00c79793",x"01471713",x"00c7d793",x"01f49513",x"00e7e7b3",x"00a7e7b3",x"00c12083",x"00040513",x"00812403",x"00412483",x"00078593",x"01010113",x"00008067",
x"04071263",x"06040863",x"00040513",x"278000ef",x"00a00793",x"06a7c663",x"00b00713",x"40a70733",x"01550793",x"00e45733",x"00f41433",x"00c71793",x"38900713",x"40a70733",x"00c7d793",x"7ff77713",
x"f8dff06f",x"02040263",x"00345713",x"000807b7",x"00f767b3",x"00c79793",x"01d41413",x"00c7d793",x"7ff00713",x"f69ff06f",x"7ff00713",x"00000793",x"f5dff06f",x"00000713",x"00000793",x"f51ff06f",
x"ff550713",x"00e41733",x"00000413",x"fa1ff06f",x"0145d693",x"00c59793",x"7ff6f693",x"00c7d793",x"00168613",x"00379793",x"01d55713",x"7fe67613",x"01f5d593",x"00f76733",x"00351893",x"0a060463",
x"c8068813",x"0fe00793",x"0307d463",x"00000793",x"00979513",x"0ff00693",x"01769693",x"00955513",x"01f59593",x"00d56533",x"00b56533",x"00008067",x"0f005e63",x"00651793",x"00371713",x"00f037b3",
x"00e7e7b3",x"01d8d893",x"0117e7b3",x"0077f713",x"16070663",x"00f7f713",x"00400693",x"00d70463",x"00478793",x"04000737",x"00e7f733",x"14070863",x"00180713",x"0ff00613",x"0ff77693",x"f8c708e3",
x"00679793",x"0097d793",x"00979513",x"01769693",x"00955513",x"01f59593",x"00d56533",x"00b56533",x"00008067",x"011767b3",x"02069a63",x"04078e63",x"00500793",x"00679793",x"0097d793",x"00979513",
x"0ff6f693",x"01769693",x"00955513",x"01f59593",x"00d56533",x"00b56533",x"00008067",x"f20788e3",x"004007b7",x"00979513",x"0ff00693",x"01769693",x"00000593",x"00955513",x"01f59593",x"00d56533",
x"00b56533",x"00008067",x"00000793",x"00979513",x"00000693",x"01769693",x"00955513",x"01f59593",x"00d56533",x"00b56533",x"00008067",x"fe900793",x"06f84263",x"01e00793",x"00800637",x"410787b3",
x"01f00513",x"00c76633",x"04f55a63",x"ffe00713",x"41070733",x"02000513",x"00e65733",x"00a78863",x"ca268693",x"00d616b3",x"00d8e8b3",x"011037b3",x"00e7e7b3",x"0077f713",x"00000813",x"ec071ce3",
x"00579713",x"00100693",x"ee074ce3",x"00000693",x"f25ff06f",x"00000693",x"f19ff06f",x"c8268693",x"00d89733",x"00e03733",x"00d616b3",x"00f8d8b3",x"00d767b3",x"00f8e7b3",x"fbdff06f",x"00080693",
x"ef5ff06f",x"000107b7",x"04f57463",x"0ff00793",x"02000713",x"00a7ee63",x"0fffd797",x"99478793",x"00a787b3",x"0007c503",x"40a70533",x"00008067",x"00855513",x"0fffd797",x"97878793",x"00a787b3",
x"0007c503",x"01800713",x"40a70533",x"00008067",x"010007b7",x"02f56263",x"01855513",x"0fffd797",x"95078793",x"00a787b3",x"0007c503",x"00800713",x"40a70533",x"00008067",x"01055513",x"0fffd797",
x"93078793",x"00a787b3",x"0007c503",x"01000713",x"40a70533",x"00008067",x"0fffd797",x"e6878793",x"0007a503",x"00008067", others=>x"00000000");
constant n5 : integer := 10;
type n6 is array(0 to 2**n5-1) of std_logic_vector(31 downto 0);
shared variable n7 : n6 := (
x"0000003f",x"00000006",x"0000005b",x"0000004f",x"00000066",x"0000006d",x"0000007d",x"00000007",x"0000007f",x"0000006f",x"6c6c6548",x"6f57206f",x"21646c72",x"00000a0d",x"00000920",x"3fc90fdb",
x"bfc90fdb",x"7149f2ca",x"3f800000",x"40000000",x"3fc00000",x"bf800000",x"3c8569d7",x"3d4bda59",x"3d886b35",x"3dba2e6e",x"3e124925",x"3eaaaaab",x"bd15a221",x"3d6ef16b",x"3d9d8795",x"3de38e38",
x"3e4ccccd",x"3eed6338",x"3f490fda",x"3f7b985e",x"3fc90fda",x"31ac3769",x"33222168",x"33140fb4",x"33a22168",x"74727173",x"00000066",x"f0001b1c",x"f00018fc",x"f0001a8c",x"f0001a9c",x"f0001a8c",
x"f0001954",x"f0001a8c",x"f0001a9c",x"f00018fc",x"f00018fc",x"f0001954",x"f0001a9c",x"f0001b08",x"f0001b08",x"f0001b08",x"f0001954",x"f0002770",x"f0002644",x"f0002764",x"f0002650",x"f0002764",
x"f00025f4",x"f0002764",x"f0002650",x"f0002644",x"f0002644",x"f00025f4",x"f0002650",x"f000265c",x"f000265c",x"f000265c",x"f00025f4",x"f0002604",x"f0002604",x"f0002724",x"f0002848",x"f0002724",
x"f00025b4",x"f0002724",x"f0002848",x"f0002604",x"f0002604",x"f00025b4",x"f0002848",x"f000261c",x"f000261c",x"f000261c",x"f00025b4",x"f0002bf0",x"f0002af0",x"f0002af0",x"f0002aec",x"f0002af8",
x"f0002af8",x"f0002aa0",x"f0002aec",x"f0002af8",x"f0002aa0",x"f0002af8",x"f0002aec",x"f0002bd4",x"f0002bd4",x"f0002bd4",x"f0002aa0",x"02020100",x"03030303",x"04040404",x"04040404",x"05050505",
x"05050505",x"05050505",x"05050505",x"06060606",x"06060606",x"06060606",x"06060606",x"06060606",x"06060606",x"06060606",x"06060606",x"07070707",x"07070707",x"07070707",x"07070707",x"07070707",
x"07070707",x"07070707",x"07070707",x"07070707",x"07070707",x"07070707",x"07070707",x"07070707",x"07070707",x"07070707",x"07070707",x"08080808",x"08080808",x"08080808",x"08080808",x"08080808",
x"08080808",x"08080808",x"08080808",x"08080808",x"08080808",x"08080808",x"08080808",x"08080808",x"08080808",x"08080808",x"08080808",x"08080808",x"08080808",x"08080808",x"08080808",x"08080808",
x"08080808",x"08080808",x"08080808",x"08080808",x"08080808",x"08080808",x"08080808",x"08080808",x"08080808",x"08080808",x"08080808",x"440f4000",x"00000000",x"40480000",x"100002c0",x"00000000",
x"00000000",x"100005ac",x"10000614",x"1000067c",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",
x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",
x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000001",x"00000000",x"abcd330e",x"e66d1234",x"0005deec",x"0000000b",
x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",
x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",
x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",
x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",
x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",
x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",
x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",
x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",
x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",
x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",
x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",
x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",
x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",
x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"00000000",x"10000704",x"10000708",x"ffffffff",x"00000000",x"00000001",
x"100002c0",x"00000000",x"00000000",others=>x"00000000");
type n8 is array(0 to 31) of std_logic_vector(31 downto 0);
signal n9 : n8 := (1=>std_logic_vector(n0), 2=>"0010" & x"0000000", others=>x"00000000");
attribute ram_style : string;
attribute ram_style of n9 : signal is "distributed";
alias n10 : std_logic is clk;
signal n11 : std_logic := '1';
signal n12 : unsigned(31 downto 0) := (others=>'0'); 
signal n13 : unsigned(31 downto 0) := (others=>'0');
signal n14 : std_logic_vector(31 downto 0);
signal n15 : std_logic_vector(31 downto 0);
signal n16 : std_logic:= '0';
alias n17 : std_logic_vector(6 downto 0) is n14(31 downto 25);
alias n18 : std_logic_vector(4 downto 0) is n14(24 downto 20);
alias n19 : std_logic_vector(4 downto 0) is n14(19 downto 15);
alias n20 : std_logic_vector(2 downto 0) is n14(14 downto 12);
alias n21 : std_logic_vector(4 downto 0) is n14(11 downto 7);
alias n22 : std_logic_vector(6 downto 0) is n14(6 downto 0);
alias n23 : std_logic_vector(6 downto 0) is n15(31 downto 25);
alias n24 : std_logic_vector(4 downto 0) is n15(24 downto 20);
alias n25 : std_logic_vector(4 downto 0) is n15(19 downto 15);
alias n26 : std_logic_vector(2 downto 0) is n15(14 downto 12);
alias n27 : std_logic_vector(4 downto 0) is n15(11 downto 7);
alias n28 : std_logic_vector(6 downto 0) is n15(6 downto 0);
signal n29 : std_logic_vector(11 downto 0);
signal n30 : std_logic_vector(11 downto 0);
signal n31 : std_logic_vector(12 downto 1);
signal n32 : std_logic_vector(31 downto 12);
signal n33 : std_logic_vector(20 downto 1);
signal n34 : std_logic_vector(31 downto 0) := (others => '0');
signal n35 : std_logic_vector(31 downto 0) := (others => '0');
signal n36 : signed(31 downto 0);
signal n37 : signed(31 downto 0);
signal n38 : unsigned(31 downto 0);
signal n39 : unsigned(31 downto 0);
signal n40 : std_logic;
signal n41 : std_logic;
signal n42 : std_logic;
signal n43 : signed(11 downto 0);
signal n44 : signed(31 downto 0);
signal n45 : signed(11 downto 0);
signal n46 : signed(31 downto 0);
signal n47 : signed(31 downto 0);
signal n48 : std_logic := '0';
signal n49 : std_logic_vector(31 downto 0);
signal n50 : unsigned(31 downto 0);
signal n51 : unsigned(31 downto 0);
signal n52 : unsigned(63 downto 0);
signal n53 : std_logic := '0';
signal n54 : std_logic := '0';
signal n55 : std_logic := '0';
signal n56 : std_logic := '0';
signal n57 : unsigned(31 downto 0);
signal n58 : unsigned(31 downto 0);
signal n59 : std_logic_vector(31 downto 0);
signal n60 : std_logic_vector(31 downto 0);
signal n61 : std_logic := '0';
signal n62 : std_logic_vector(31 downto 0);
signal n63 : std_logic := '0';
signal n64 : std_logic_vector(31 downto 0);
signal n65 : std_logic := '0';
signal n66 : std_logic := '0';
signal n67 : std_logic_vector(3 downto 0) := "0000";
signal n68 : std_logic_vector(31 downto 0) := (others => '0');
signal n69 : unsigned(31 downto 0) := (others => '0');
signal n70 : std_logic := '0';
signal n71 : std_logic_vector(31 downto 0);
signal n72 : std_logic := '0';
signal n73 : std_logic := '0';
signal n74 : std_logic := '0';
signal n75 : std_logic := '0';
signal n76 : std_logic_vector(0 downto 0) := (others=>'0');
signal n77 : std_logic_vector(0 downto 0) := (others=>'0');
signal n78 : std_logic := '1';
signal n79 : std_logic_vector(31 downto 0) := (others=>'0');
type n80 is array ( (2**5)-1 downto 0 ) of std_logic_vector(8-1 downto 0);
shared variable n81 : n80;
signal n82 : std_logic := '0'; 
signal n83 : unsigned(5-1 downto 0);
signal n84 : std_logic_vector(8-1 downto 0); 
signal n85 : unsigned(5-1 downto 0);
signal n86 : unsigned(5-1 downto 0); 
signal n87 : std_logic_vector(8-1 downto 0);
signal n88 : std_logic := '0';
signal n89 : std_logic := '0';
signal n90 : std_logic_vector(8-1 downto 0);
signal n91 : std_logic := '0';
signal n92 : std_logic; 
signal n93 : unsigned(5 downto 0);
signal n94 : unsigned(5 downto 0); 
signal n95 : std_logic;
signal n96 : std_logic;
signal n97 : std_logic := '0';
signal n98 : std_logic := '0';
signal n99 : std_logic := '0';
signal n100 : std_logic_vector(31 downto 0) := (others=>'0');
signal n101 : unsigned(5 downto 0) := (others=>'0');
signal n102 : unsigned(5 downto 0) := (others=>'0');
signal n103 : unsigned(5 downto 0) := (others=>'0');
signal n104 : unsigned(5 downto 0) := (others=>'0');
signal n105 : std_logic := '0';
signal n106 : std_logic_vector(31 downto 0) := (others=>'0');
signal n107 : std_logic_vector(31 downto 0) := (others=>'0');
type n108 is array ( (2**3)-1 downto 0 ) of std_logic_vector(8-1 downto 0);
shared variable n109 : n108;
signal n110 : std_logic := '0'; 
signal n111 : unsigned(3-1 downto 0);
signal n112 : std_logic_vector(8-1 downto 0); 
signal n113 : unsigned(3-1 downto 0);
signal n114 : unsigned(3-1 downto 0); 
signal n115 : std_logic_vector(8-1 downto 0);
signal n116 : std_logic := '0';
signal n117 : std_logic := '0';
signal n118 : std_logic_vector(8-1 downto 0);
signal n119 : std_logic := '0';
signal n120 : std_logic; 
signal n121 : unsigned(3 downto 0);
signal n122 : unsigned(3 downto 0); 
signal n123 : std_logic;
signal n124 : std_logic;
signal n125 : std_logic := '0';
signal n126 : std_logic := '0';
signal n127 : std_logic := '0';
signal n128 : std_logic_vector(31 downto 0) := (others=>'0');
signal n129 : unsigned(3 downto 0) := (others=>'0');
signal n130 : unsigned(3 downto 0) := (others=>'0');
signal n131 : unsigned(3 downto 0) := (others=>'0');
signal n132 : unsigned(3 downto 0) := (others=>'0');
type n133 is array ( (2**3)-1 downto 0 ) of std_logic_vector(8-1 downto 0);
shared variable n134 : n133;
signal n135 : std_logic := '0'; 
signal n136 : unsigned(3-1 downto 0);
signal n137 : std_logic_vector(8-1 downto 0); 
signal n138 : unsigned(3-1 downto 0);
signal n139 : unsigned(3-1 downto 0); 
signal n140 : std_logic_vector(8-1 downto 0);
signal n141 : std_logic := '0';
signal n142 : std_logic := '0';
signal n143 : std_logic_vector(8-1 downto 0);
signal n144 : std_logic := '0';
signal n145 : std_logic; 
signal n146 : unsigned(3 downto 0);
signal n147 : unsigned(3 downto 0); 
signal n148 : std_logic;
signal n149 : std_logic;
signal n150 : std_logic := '0';
signal n151 : std_logic := '0';
signal n152 : std_logic := '0';
signal n153 : std_logic_vector(31 downto 0) := (others=>'0');
signal n154 : unsigned(3 downto 0) := (others=>'0');
signal n155 : unsigned(3 downto 0) := (others=>'0');
signal n156 : unsigned(3 downto 0) := (others=>'0');
signal n157 : unsigned(3 downto 0) := (others=>'0');
signal n158 : std_logic := '0';
signal n159 : std_logic_vector(31 downto 0) := (others=>'0');
begin
n29 <= n14(31 downto 20);
n30 <= n14(31 downto 25) & n14(11 downto 7);
n31 <= n14(31) & n14(7) & n14(30 downto 25) & n14(11 downto 8);
n32 <= n14(31 downto 12);
n33 <= n14(31) & n14(19 downto 12) & n14(20) & n14(30 downto 21);
n36 <= signed(n34);
n37 <= signed(n35);
n38 <= unsigned(n34);
n39 <= unsigned(n35);
n43 <= signed(n29);
n44 <= resize(n43, 32);
n45 <= signed(n30);
n46 <= resize(n45, 32);
n47 <= signed(n32) & x"000";
n70 <= '1' when (n16 = '1') and (n66 = '1') and (n69(31 downto 28) = x"2") else '0';
n160 : process(n10) is
variable n161 : integer range 0 to 127 := 0;
variable n162 : std_logic := '1';
begin
if rising_edge(n10) then
if n161 = 127 then
n162 := '0';
else
n161 := n161 + 1;
n162 := '1';
end if;
n11 <= n162;
end if;
end process;
n34 <= n9(to_integer(unsigned(n19)));
n35 <= n9(to_integer(unsigned(n18)));
n163: process(n20, n37, n44, n17, n22, n34, n36, n38) is
variable n164 : signed(31 downto 0);
variable n165 : unsigned(31 downto 0);
variable n166 : std_logic_vector(32 downto 0);
variable n167 : signed(32 downto 0);
variable n168 : std_logic;
variable n169 : std_logic;
variable n170 : std_logic;
variable n171 : std_logic;
begin
if n22(5) = '0' then 
n164 := n44;
n165 := unsigned(n44);
n171 := '0';
else 
n164 := signed(n37);
n165 := unsigned(n37);
n171 := n17(5); 
end if;
if n36 < n164 then
n168 := '1';
else
n168 := '0';
end if;
if n38 < n165 then
n169 := '1';
else
n169 := '0';
end if;
if n38 = n165 then
n170 := '1';
else
n170 := '0';
end if;
n40 <= n168; 
n41 <= n169; 
n42 <= n170;
n71 <= (others=>'0');
case n20 is
when "000" => 
if n171 = '1' then
n71 <= std_logic_vector( n36 - n164 );
else
n71 <= std_logic_vector( n36 + n164 );
end if;
when "011" => 
n71(0) <= n169;
when "100" => 
n71 <= std_logic_vector(n36) xor std_logic_vector(n164); 
when "110" => 
n71 <= std_logic_vector(n36) or std_logic_vector(n164);
when "111" => 
n71 <= std_logic_vector(n36) and std_logic_vector(n164);
when "001" => 
n71 <= std_logic_vector(shift_left(unsigned(n34), to_integer(n165(4 downto 0))));
when "101" => 
n166 := std_logic_vector(shift_right(signed((n17(5) and n34(31)) & n34), to_integer(n165(4 downto 0)))); 
n71 <= n166(31 downto 0);
when others =>
n71 <= (others=>'0');
end case;
end process;
n172 : process(n10) is
variable n173 : unsigned(31 downto 0);
variable n174 : unsigned(31 downto 0);
variable n175 : unsigned(63 downto 0);
begin
if rising_edge(n10) then
n52 <= n175;
n175 := n50*n51;
n173 := n50;
n174 := n51; 
end if;
end process;
n176 : process(n10) is
type n177 is (n178, n179, n180, n181, n182); 
variable n183 : n177 := n178;
variable n184 : std_logic; 
variable n185 : std_logic := '0';
variable n186 : std_logic := '0'; 
constant n187 : integer := 32; 
constant n188 : integer := 32; 
variable n189 : unsigned(n187-1 downto 0);
variable n190 : unsigned(n188-1 downto 0); 
variable n191 : integer range 0 to n187+1 := 0;
variable n192 : unsigned(n188 downto 0) := (others=>'0');
variable n193 : unsigned(n188-1 downto 0);
variable n194 : std_logic;
variable n195 : std_logic;
variable n196 : std_logic_vector(63 downto 0);
begin
if rising_edge(n10) then
n48 <= '0'; 
case n183 is
when n178 =>
n184 := '1';
n195 := '0';
n185 := '0';
n186 := '0';
n50 <= unsigned(n34);
n51 <= unsigned(n35);
if (n22 = "0110011") and (n17(0) = '1') and (n16 = '1') then 
case n20 is
when "000" => 
n183 := n179;
n184 := '0';
when "100" => 
n183 := n182;
n185 := n34(31);
n186 := n35(31); 
when "101" => 
n183 := n182;
when "110" => 
n183 := n182;
n195 := '1'; 
n185 := n34(31);
n186 := n35(31); 
when "111" => 
n183 := n182;
n195 := '1';
when others =>
end case;
if n183 = n182 then 
if n185 = '1' then 
n189 := unsigned( -signed(n34) );
else
n189 := unsigned(n34);
end if;
if n186 = '1' then 
n190 := unsigned( -signed(n35) ); 
else
n190 := unsigned(n35); 
end if;
n191 := n187; 
n192 := (0=>n189(n187-1),others=>'0');
n193 := n189(n187-2 downto 0) & '0';
end if;
end if;
when n179 => 
n183 := n180; 
when n180 => 
n183 := n181; 
when n181 =>
if n184 = '1' then 
n49 <= std_logic_vector(n52(63 downto 32));
else
n49 <= std_logic_vector(n52(31 downto 0));
end if;
n48 <= '1';
n183 := n178;
when n182 =>
if n191 = 0 then
n48 <= '1';
n183 := n178;
if (n185 xor n186) = '1' then
if n195 = '1' then 
n49 <= std_logic_vector( -signed(n192(32 downto 1)) ); 
else
n49 <= std_logic_vector( -signed(n193) ); 
end if;
else
if n195 = '1' then 
n49 <= std_logic_vector(n192(32 downto 1)); 
else
n49 <= std_logic_vector(n193); 
end if;
end if;
else
if n192 >= ('0'&n190) then
n194 := '1';
n192 := n192-n190; 
else 
n194 := '0';
end if;
n192 := n192(n188-1 downto 0) & n193(n193'high);
n193 := n193(n187-2 downto 0) & n194; 
n191 := n191 - 1; 
end if; 
end case;
end if;
end process;
n53 <= n16 when n22 = "0000011" else '0';
n57 <= unsigned(n36 + n44);
n54 <= n53 when n57(31 downto 28) = "0010" else '0';
n56 <= n55 when n58(31 downto 28) = "0010" else '0';
process(n10)
begin
if rising_edge(n10) then
n59 <= n7(to_integer(n57(n5-1+2 downto 0+2)));
end if;
end process;
process (n59, n58, n26 ) is
begin
case n26 is
when "100" => 
case n58(1 downto 0) is
when "00" => 
n60(7 downto 0) <= n59(7 downto 0);
n60(31 downto 8) <= (others=>'0');
when "01" => 
n60(7 downto 0) <= n59(15 downto 8);
n60(31 downto 8) <= (others=>'0');
when "10" => 
n60(7 downto 0) <= n59(23 downto 16);
n60(31 downto 8) <= (others=>'0');
when "11" => 
n60(7 downto 0) <= n59(31 downto 24);
n60(31 downto 8) <= (others=>'0');
when others => 
n60 <= n59;
end case;
when others =>
n60 <= n59;
end case;
end process;
process(n10)
begin
if rising_edge(n10) then
n61 <= n53 and n16;
end if;
end process;
with n58(31 downto 28) select n62 <= 
n60 when "0001", n64 when "0010", x"00000001" when others;
with n58(31 downto 28) select n63 <= 
n61 when "0001", n65 when "0010", '1' when others;
with n58(6 downto 2) select n64 <= 
n79 when "00000",
x"000000" & n118 when "00011",
n106 when "00100",
n107 when "00101",
x"00000001" when others;
with n58(6 downto 2) select n65 <= 
n105 when "00110",
n158 when "00111",
'1' when others;
n69 <= unsigned(n36 + n46);
n66 <= n16 when n22 = "0100011" else '0';
process(n20,n69,n35) is
begin
n68 <= n35;
case n20 is
when "000" =>
case n69(1 downto 0) is
when "00" => 
n67 <= "0001";
n68( 7 downto 0) <= n35(7 downto 0);
when "01" => 
n67 <= "0010";
n68(15 downto 8) <= n35(7 downto 0);
when "10" => 
n67 <= "0100";
n68(23 downto 16) <= n35(7 downto 0);
when "11" => 
n67 <= "1000";
n68(31 downto 24) <= n35(7 downto 0);
when others => n67 <= "0001";
end case;
when "001" =>
if n69(1)='0' then
n67 <= "0011";
else
n67 <= "1100";
n68(31 downto 16) <= n35(15 downto 0);
end if;
when others =>
n67 <= "1111";
end case;
end process;
WRP : process(n10)
begin
if rising_edge(n10) then
if( n66 = '1' and n69(31 downto 28) = "0001" ) then
if n67(0) = '1' then
n7(to_integer(n69(n5-1+2 downto 0+2)))(7 downto 0) := n68(7 downto 0);
end if;
if n67(1) = '1' then
n7(to_integer(n69(n5-1+2 downto 0+2)))(15 downto 8) := n68(15 downto 8);
end if;
if n67(2) = '1' then
n7(to_integer(n69(n5-1+2 downto 0+2)))(23 downto 16) := n68(23 downto 16);
end if;
if n67(3) = '1' then
n7(to_integer(n69(n5-1+2 downto 0+2)))(31 downto 24) := n68(31 downto 24);
end if;
end if;
end if;
end process;
n197 : process(n10) is
variable n198 : integer range 0 to n1 := 0;
begin
if rising_edge(n10) then 
n75 <= '0';
if n198 = n1 then
n75 <= '1';
n198 := 0;
end if;
n198 := n198 + 1;
end if;
end process;
n199 : process(n10) is
variable n200 : integer range 0 to 1000 := 0;
begin
if rising_edge(n10) then
n74 <= '0';
if n200 = 1000 then
n74 <= '1';
n200 := 0;
end if;
if n75 = '1' then
n200 := n200 + 1;
end if;
end if;
end process;
n201 : process(n10)
begin
if rising_edge(n10) then
if(n82='1') then
n81(to_integer(n83)) := n84;
end if;
end if;
end process;
n202 : process(n10)
begin
if rising_edge(n10) then
n90 <= n81(to_integer(n86 ));
end if;
end process;
n86 <= n102(4 downto 0) + 1 when ( (n91 = '1') and (n92 = '1') ) else n102(4 downto 0); 
n89 <= '0' when ( n104(4 downto 0) = n103(4 downto 0) ) and (n104(5) /= n103(5)) else '1';
n96 <= not n89;
n93 <= to_unsigned( 32,6) - (n103 - n104);
n203 : process( n10 ) is
constant n204 : unsigned(5 downto 0) := (5=>'1', others=>'0');
begin
if rising_edge( n10 ) then
n82 <= '0';
n84 <= n87;
if n98 = '1' then
n103 <= (others=>'0');
else
if (n88 = '1') and (n89 = '1') then 
n83 <= n103(4 downto 0);
n103 <= n103 + 1;
n82 <= '1';
end if;
end if;
end if;
end process;
n91 <= '0' when (n102 = n101) or (n99 = '1') else '1';
n94 <= n101 - n102;
n95 <= not n91;
n205 : process( n10 ) is
constant n204 : unsigned(5 downto 0) := (5=>'1', others=>'0');
begin
if rising_edge( n10 ) then
if n99 = '1' then
n102 <= (others=>'0');
else
if n91 = '1' and n92 = '1' then
n102 <= n102 + 1;
end if;
end if;
end if;
end process;
n206 : process( n10 ) is
variable n207 : unsigned(5 downto 0);
begin
if rising_edge( n10 ) then
n98 <= '0';
n99 <= '0';
if (n11 = '1') or (n97 = '1') then
n101 <= (others=>'0');
n207 := (others=>'0');
n98 <= '1';
n99 <= '1';
else
n101 <= n207;
n207 := n103;
end if;
n104 <= n102;
end if;
end process;
n79(5 downto 0) <= std_logic_vector(n93);
n79(16) <= n95;
n79(17) <= n96;
n208 : process(n10) is
begin
if rising_edge(n10) then
n88 <= '0';
if n70='1' then
if n69(6 downto 2) = "00000" then 
n88 <= '1';
n87 <= n68(7 downto 0);
end if;
end if;
end if;
end process;
n209 : process(n10) is
variable n210 : std_logic_vector(7 downto 0);
constant n211 : integer := 867;
variable n161 : integer range 0 to n211 := 0;
variable n212 : integer range 0 to 10 := 10;
begin
if rising_edge(n10) then
n92<= '0';
if n212 = 10 then
uart_tx <= '1'; 
n161 := 0;
if n91= '1' then
n210 := n90;
n92<= '1';
uart_tx <= '0';
n212 := 0;
end if;
else
if n161 = n211 then
n161 := 0;
uart_tx <= n210(0);
n210 := '1' & n210(n210'high downto 1);
n212 := n212 + 1;
else
n161 := n161 + 1;
end if;
end if;
end if;
end process;
n213 : process(n10) is
begin
if rising_edge(n10) then
if n11 = '1' then
LEDs <= "0000000000000000";
elsif n70='1' and n69(6 downto 2) = "00010" then 
LEDs <= n68(15 downto 0);
end if;
end if;
end process;
n106(16) <= n105;
n106(15 downto 0) <= n153(15 downto 0);
n107(15 downto 0) <= n128(15 downto 0);
n125 <= n68(1) when n70='1' and n69(6 downto 2) = "00110" else '0';
n150 <= n68(2) when n70='1' and n69(6 downto 2) = "00110" else '0';
n214 : process( n10 ) is
constant n215 : integer := 8;
constant n216 : integer := 49; 
variable n161 : integer range 0 to n216 := 0; 
variable n212 : integer range 0 to 7;
variable n217 : std_logic := '1';
variable n218 : std_logic := '1';
variable n219 : std_logic := '1';
variable n220 : std_logic_vector(7 downto 0);
variable n221 : std_logic;
constant n222 : std_logic := '0';
constant n223 : std_logic := '0';
begin
if rising_edge( n10 ) then
n145 <= '0';
n116 <= '0';
if n11 = '1' then
n217 := '1'; 
else
if n217 = '1' then 
n212 := 0;
n161 := 0;
n221 := '0';
n219 := not n222;
n218 := n222;
if n144 = '1' then
n145 <= '1';
n220 := n143;
n217 := '0'; 
end if;
else
if n161 = n216 then
n161 := 0; 
if n221 = '1' then
n217 := '1';
else
if n218 = '1' and n219 = '1' then 
n220 := n220(n220'high-1 downto 0) & accel_MISO;
if n212 = 7 then 
n212 := 0;
n115 <= n220;
n116 <= '1';
if n144 = '1' then
n145 <= '1';
n220 := n143;
else
n221 := not n222;
n217 := n222;
end if;
else
n212 := n212 + 1;
end if; 
end if; 
n219 := '1';
if not( n222 = '1' and n217 = '1' ) then
n218 := not n218;
end if;
end if; 
else
n161 := n161 + 1;
end if;
end if;
n105 <= n217;
accel_SSn <= n217;
accel_SCLK <= n218 xor n222 xor n223;
accel_MOSI <= n220(n220'high);
end if; 
end if;
end process; 
n224 : process(n10)
begin
if rising_edge(n10) then
if(n135='1') then
n134(to_integer(n136)) := n137;
end if;
end if;
end process;
n225 : process(n10)
begin
if rising_edge(n10) then
n143 <= n134(to_integer(n139 ));
end if;
end process;
n139 <= n155(2 downto 0) + 1 when ( (n144 = '1') and (n145 = '1') ) else n155(2 downto 0); 
n142 <= '0' when ( n157(2 downto 0) = n156(2 downto 0) ) and (n157(3) /= n156(3)) else '1';
n149 <= not n142;
n146 <= to_unsigned( 8,4) - (n156 - n157);
n226 : process( n10 ) is
constant n204 : unsigned(3 downto 0) := (3=>'1', others=>'0');
begin
if rising_edge( n10 ) then
n135 <= '0';
n137 <= n140;
if n151 = '1' then
n156 <= (others=>'0');
else
if (n141 = '1') and (n142 = '1') then 
n136 <= n156(2 downto 0);
n156 <= n156 + 1;
n135 <= '1';
end if;
end if;
end if;
end process;
n144 <= '0' when (n155 = n154) or (n152 = '1') else '1';
n147 <= n154 - n155;
n148 <= not n144;
n227 : process( n10 ) is
constant n204 : unsigned(3 downto 0) := (3=>'1', others=>'0');
begin
if rising_edge( n10 ) then
if n152 = '1' then
n155 <= (others=>'0');
else
if n144 = '1' and n145 = '1' then
n155 <= n155 + 1;
end if;
end if;
end if;
end process;
n228 : process( n10 ) is
variable n229 : unsigned(3 downto 0);
begin
if rising_edge( n10 ) then
n151 <= '0';
n152 <= '0';
if (n11 = '1') or (n150 = '1') then
n154 <= (others=>'0');
n229 := (others=>'0');
n151 <= '1';
n152 <= '1';
else
n154 <= n229;
n229 := n156;
end if;
n157 <= n155;
end if;
end process;
n153(3 downto 0) <= std_logic_vector(n146);
n153(16) <= n148;
n153(17) <= n149;
process(n10) is
begin
if rising_edge(n10) then
n141 <= '0';
if n70='1' then
if n69(6 downto 2) = "00011" then 
n141 <= '1';
n140 <= n68(7 downto 0);
end if;
end if;
end if;
end process;
n230 : process(n10)
begin
if rising_edge(n10) then
if(n110='1') then
n109(to_integer(n111)) := n112;
end if;
end if;
end process;
n231 : process(n10)
begin
if rising_edge(n10) then
n118 <= n109(to_integer(n114 ));
end if;
end process;
n114 <= n130(2 downto 0) + 1 when ( (n119 = '1') and (n120 = '1') ) else n130(2 downto 0); 
n117 <= '0' when ( n132(2 downto 0) = n131(2 downto 0) ) and (n132(3) /= n131(3)) else '1';
n124 <= not n117;
n121 <= to_unsigned( 8,4) - (n131 - n132);
n232 : process( n10 ) is
constant n204 : unsigned(3 downto 0) := (3=>'1', others=>'0');
begin
if rising_edge( n10 ) then
n110 <= '0';
n112 <= n115;
if n126 = '1' then
n131 <= (others=>'0');
else
if (n116 = '1') and (n117 = '1') then 
n111 <= n131(2 downto 0);
n131 <= n131 + 1;
n110 <= '1';
end if;
end if;
end if;
end process;
n119 <= '0' when (n130 = n129) or (n127 = '1') else '1';
n122 <= n129 - n130;
n123 <= not n119;
n233 : process( n10 ) is
constant n204 : unsigned(3 downto 0) := (3=>'1', others=>'0');
begin
if rising_edge( n10 ) then
if n127 = '1' then
n130 <= (others=>'0');
else
if n119 = '1' and n120 = '1' then
n130 <= n130 + 1;
end if;
end if;
end if;
end process;
n234 : process( n10 ) is
variable n235 : unsigned(3 downto 0);
begin
if rising_edge( n10 ) then
n126 <= '0';
n127 <= '0';
if (n11 = '1') or (n125 = '1') then
n129 <= (others=>'0');
n235 := (others=>'0');
n126 <= '1';
n127 <= '1';
else
n129 <= n235;
n235 := n131;
end if;
n132 <= n130;
end if;
end process;
n128(3 downto 0) <= std_logic_vector(n122);
n128(16) <= n123;
n128(17) <= n124;
process(n10) is
begin
if rising_edge(n10) then
n120 <= '0';
if n54 = '1' and n57(6 downto 2) = "00011" then
n120 <= '1'; 
end if;
end if;
end process;
n236 : process(n10) is
variable n237 : unsigned(31 downto 0) := to_unsigned(0, 32);
variable n238 : unsigned(31 downto 0) := to_unsigned(0, 32);
variable n239 : std_logic := '0';
begin
if rising_edge(n10) then
n158 <= '0';
if n11 = '1' then
n237 := (others=>'0');
n238 := (others=>'0');
n159 <= (others=>'0');
elsif n70='1' and n69(6 downto 2) = "00111" then 
n237 := unsigned(n68);
n238 := unsigned(n68);
elsif n70='1' and n69(6 downto 2) = "01000" then 
n159 <= n68;
else
if n159(16) = '1' then
if n237 = x"00000000" then
n237 := n238;
n158 <= '1';
n76(0) <= n159(17);
else
case n159(25 downto 24) is
when "00" =>
n239 := '1';
when "01" =>
n239 := n75;
when "10" =>
n239 := n74;
when others =>
n239 := '0';
end case;
if n239 = '1' then
n237 := n237 - 1;
end if;
end if;
end if;
end if;
if n77(0) = '1' then
n76(0) <= '0';
end if;
end if;
end process;
n240 : process(n10) is
subtype n241 is std_logic_vector(7 downto 0);
type n242 is array (0 to 7) of n241;
variable n243 : n242 := (others=>"00000000");
variable n244 : integer range 0 to 125 := 0;
variable n245 : std_logic_vector(7 downto 0) := "00000001";
begin
if rising_edge(n10) then
if n70='1' then
if n69(6 downto 2) = "01001" then 
n243(0) := n68(7 downto 0);
elsif n69(6 downto 2) = "01010" then 
n243(1) := n68(7 downto 0);
elsif n69(6 downto 2) = "01011" then 
n243(2) := n68(7 downto 0);
elsif n69(6 downto 2) = "01100" then 
n243(3) := n68(7 downto 0);
elsif n69(6 downto 2) = "01101" then 
n243(4) := n68(7 downto 0);
elsif n69(6 downto 2) = "01110" then 
n243(5) := n68(7 downto 0);
elsif n69(6 downto 2) = "01111" then 
n243(6) := n68(7 downto 0);
elsif n69(6 downto 2) = "10000" then 
n243(7) := n68(7 downto 0);
end if;
end if;
if n75 = '1' then
if n244 = 125 then
n244 := 0;
if n245(n245'high) = '1' then 
n245 := "00000001";
else
n245 := n245(n245'high-1 downto 0)&'0';
end if;
else
n244 := n244 + 1;
end if;
end if;
if n245(0) = '1' then
s7_seg <= n243(0);
elsif n245(1) = '1' then
s7_seg <= n243(1);
elsif n245(2) = '1' then
s7_seg <= n243(2);
elsif n245(3) = '1' then
s7_seg <= n243(3);
elsif n245(4) = '1' then
s7_seg <= n243(4);
elsif n245(5) = '1' then
s7_seg <= n243(5);
elsif n245(6) = '1' then
s7_seg <= n243(6);
elsif n245(7) = '1' then
s7_seg <= n243(7);
end if;
s7_sel <= not n245;
end if;
end process;
process( n10 ) is
variable n246 : std_logic := '0';
variable n247 : std_logic_vector(1 downto 0);
variable n248 : std_logic := '0'; 
variable n249 : std_logic_vector(31 downto 0); 
variable n250 : std_logic_vector(4 downto 0) := "00010";
variable n251 : unsigned(31 downto 0) := n0; 
variable n252 : std_logic := '0'; 
variable n253 : unsigned(31 downto 0); 
variable n254 : std_logic:= '0'; 
variable n255 : std_logic := '0';
variable n256 : std_logic := '0';
variable n257 : unsigned(31 downto 0) := n0; 
variable n258 : std_logic_vector(31 downto 0); 
begin
if rising_edge( n10 ) then
n246 := '0';
n254 := '1';
n252 := '0';
n248 := '0'; 
n249 := "0010" & x"0000000";
n55 <= '0';
if n256 = '1' then 
if n48 = '1' then
n248 := '1';
n249 := n49;
n256 := '0';
else
n247 := "00";
n246 := '1';
n254 := '0';
end if;
elsif n255 = '1' then
n55 <= '1';
if n63 = '1' then
n248 := '1';
n249 := n62;
n255 := '0';
else
n247 := "00";
n246 := '1';
n254 := '0';
end if;
elsif n16 = '1' then
n250 := n21;
n58 <= n57;
n15 <= n14;
case n22 is
when "0110111" => 
n248 := '1';
n249(31 downto 12) := n32;
when "0010111" => 
n248 := '1'; 
n249 := std_logic_vector( signed(n12) + n47 );
when "1101111" => 
n248 := '1'; 
n249 := std_logic_vector(n257); 
n253 := unsigned( signed(n12) + signed(n33&'0') );
n252 := '1';
when "1100111" => 
n248 := '1'; 
n249 := std_logic_vector(n257); 
n253 := unsigned(n43 + n36);
n252 := '1';
when "1100011" => 
n253 := unsigned( signed(n12) + signed(n31&'0') );
case n20 is 
when "000" => 
if n42 = '1' then
n252 := '1';
end if;
when "001" => 
if n42 = '0' then
n252 := '1';
end if;
when "100" => 
if n40 = '1' then
n252 := '1';
end if;
when "101" => 
if n40 = '0' then
n252 := '1';
end if;
when "110" => 
if n41 = '1' then
n252 := '1';
end if;
when "111" => 
if n41 = '0' then
n252 := '1';
end if;
when others=>
end case;
when "0000011" => 
n247 := "00";
n246 := '1';
n254 := '0';
n255 := '1';
when "0100011" => 
when "0010011" => 
n248 := '1';
n249 := n71;
when "0110011" => 
if n17(0) = '1' then 
n247 := "00";
n246 := '1';
n254 := '0';
n256 := '1';
else
n248 := '1';
n249 := n71;
end if;
when others =>
end case;
end if; 
if n11 = '1' then
n247 := "00";
n246 := '1';
n251 := n0;
n257 := n0;
n248 := '1';
n252 := '0';
n254 := '0';
n255 := '0';
n256 := '0';
elsif n252 = '1' then 
n247 := "00";
n246 := '1';
n251(n2-1+2 downto 0+2) := n253(n2-1+2 downto 0+2); 
elsif n254 = '1' then
n251(n2-1+2 downto 0+2) := n251(n2-1+2 downto 0+2)+1;
n246 := '1';
end if;
n13 <= n12;
n247 := n247(0) & n246;
n16 <= n247(1);
if (n248 = '1') and (n250 /= "00000") then
n9(to_integer(unsigned(n250))) <= n249;
end if;
if n11 = '1' then
n250 := "00010";
end if;
n14 <= n258;
n12 <= n257;
n258 := n4(to_integer(n251(n2-1+2 downto 0+2)));
n257 :=n251;
end if;
end process;
end architecture;
